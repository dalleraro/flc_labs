
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 15 10:58:55 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 15 10:58:55 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\003\000\002\006\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\006\000\002\012\006\000" +
    "\002\012\003\000\002\010\003\000\002\010\003\000\002" +
    "\005\004\000\002\005\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\013\006" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\024\003\000\002\024\003\000\002\017\011\000\002" +
    "\020\011\000\002\020\007\000\002\021\005\000\002\021" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\023\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\042\010\043\004\001\002\000\004\006" +
    "\ufff6\001\002\000\016\006\013\007\035\010\032\011\027" +
    "\042\010\043\004\001\002\000\004\006\013\001\002\000" +
    "\004\002\012\001\002\000\004\006\ufff7\001\002\000\016" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\042\ufffe\043\ufffe\001" +
    "\002\000\004\002\001\001\002\000\040\015\ufff8\021\ufff8" +
    "\022\021\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\001\002\000\006\021\ufffb\023\ufffb\001\002\000\006\021" +
    "\016\023\017\001\002\000\004\006\013\001\002\000\016" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\042\ufffd\043\ufffd\001" +
    "\002\000\006\021\ufffc\023\ufffc\001\002\000\006\004\023" +
    "\006\022\001\002\000\004\020\025\001\002\000\004\020" +
    "\024\001\002\000\036\015\ufffa\021\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\001\002\000\036\015\ufff9" +
    "\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\001\002\000\016\002\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\017\ufff0\001\002\000\004\014\114\001\002\000\016" +
    "\002\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\017\ufff2\001" +
    "\002\000\016\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\017\ufff4\001\002\000\004\014\070\001\002\000\016\002" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\017\ufff1\001\002" +
    "\000\016\006\uffff\007\uffff\010\uffff\011\uffff\042\uffff\043" +
    "\uffff\001\002\000\004\006\013\001\002\000\016\002\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\017\ufff3\001\002\000" +
    "\014\002\000\006\013\007\035\010\032\011\027\001\002" +
    "\000\004\036\041\001\002\000\014\004\044\005\047\006" +
    "\013\014\042\025\043\001\002\000\014\004\044\005\047" +
    "\006\013\014\042\025\043\001\002\000\006\004\062\005" +
    "\061\001\002\000\034\015\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\001\002\000\034\015\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\001\002\000\034" +
    "\015\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\001\002\000\034\015\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\001\002\000\014\023\053\024\054\025" +
    "\055\026\052\027\056\001\002\000\034\015\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\001\002\000\012" +
    "\004\uffd6\005\uffd6\006\uffd6\025\uffd6\001\002\000\016\002" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\017\uffef\001\002" +
    "\000\012\004\uffd8\005\uffd8\006\uffd8\025\uffd8\001\002\000" +
    "\012\004\uffd7\005\uffd7\006\uffd7\025\uffd7\001\002\000\012" +
    "\004\uffd5\005\uffd5\006\uffd5\025\uffd5\001\002\000\012\004" +
    "\044\005\047\006\013\025\043\001\002\000\034\015\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\001\002" +
    "\000\034\015\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\001\002\000\034\015\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\001\002\000\014\015\064\024" +
    "\054\025\055\026\052\027\056\001\002\000\034\015\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\001\002" +
    "\000\016\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\017" +
    "\ufff5\001\002\000\004\023\067\001\002\000\016\002\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\017\uffdd\001\002\000" +
    "\016\004\044\005\047\006\013\014\042\025\043\041\073" +
    "\001\002\000\030\024\054\025\055\026\052\027\056\030" +
    "\111\031\110\032\104\033\103\034\107\035\102\036\105" +
    "\001\002\000\004\015\075\001\002\000\016\004\044\005" +
    "\047\006\013\014\042\025\043\041\073\001\002\000\004" +
    "\015\uffe5\001\002\000\014\006\013\007\035\010\032\011" +
    "\027\016\077\001\002\000\016\002\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\017\uffe7\001\002\000\012\006\013\007" +
    "\035\010\032\011\027\001\002\000\014\006\013\007\035" +
    "\010\032\011\027\017\101\001\002\000\016\002\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\017\uffe8\001\002\000\014" +
    "\004\uffdf\005\uffdf\006\uffdf\014\uffdf\025\uffdf\001\002\000" +
    "\014\004\uffe1\005\uffe1\006\uffe1\014\uffe1\025\uffe1\001\002" +
    "\000\014\004\uffe2\005\uffe2\006\uffe2\014\uffe2\025\uffe2\001" +
    "\002\000\004\036\113\001\002\000\014\004\044\005\047" +
    "\006\013\014\042\025\043\001\002\000\014\004\uffe0\005" +
    "\uffe0\006\uffe0\014\uffe0\025\uffe0\001\002\000\014\004\uffe3" +
    "\005\uffe3\006\uffe3\014\uffe3\025\uffe3\001\002\000\014\004" +
    "\uffe4\005\uffe4\006\uffe4\014\uffe4\025\uffe4\001\002\000\014" +
    "\015\uffe6\024\054\025\055\026\052\027\056\001\002\000" +
    "\014\004\uffde\005\uffde\006\uffde\014\uffde\025\uffde\001\002" +
    "\000\016\004\044\005\047\006\013\014\042\025\043\041" +
    "\073\001\002\000\004\015\116\001\002\000\004\016\117" +
    "\001\002\000\012\006\013\007\035\010\032\011\027\001" +
    "\002\000\014\006\013\007\035\010\032\011\027\017\121" +
    "\001\002\000\016\002\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\017\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\012\003\006\004\004\006\010\010\005\001" +
    "\001\000\002\001\001\000\024\005\036\006\033\007\030" +
    "\010\005\012\037\013\035\017\027\020\032\023\025\001" +
    "\001\000\006\011\014\012\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\065\001" +
    "\001\000\002\001\001\000\016\007\064\012\037\013\035" +
    "\017\027\020\032\023\025\001\001\000\002\001\001\000" +
    "\012\012\050\014\047\015\044\024\045\001\001\000\012" +
    "\012\050\014\062\015\044\024\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\050\015" +
    "\044\024\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\050\014\070\015\044\021\071\024\045\001" +
    "\001\000\006\016\056\022\105\001\001\000\002\001\001" +
    "\000\014\012\050\014\070\015\044\021\073\024\045\001" +
    "\001\000\002\001\001\000\016\007\075\012\037\013\035" +
    "\017\027\020\032\023\025\001\001\000\002\001\001\000" +
    "\020\005\077\007\030\012\037\013\035\017\027\020\032" +
    "\023\025\001\001\000\016\007\064\012\037\013\035\017" +
    "\027\020\032\023\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\050\014\111\015\044\024\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\056\001\001\000\002\001\001\000\014\012\050" +
    "\014\070\015\044\021\114\024\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\117\007\030\012\037" +
    "\013\035\017\027\020\032\023\025\001\001\000\016\007" +
    "\064\012\037\013\035\017\027\020\032\023\025\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= DIV 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= STAR 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= MINUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op ::= PLUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // n ::= DOUBLE 
            { parser.Tree.reduce(1,"n",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*n*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // n ::= INT 
            { parser.Tree.reduce(1,"n",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*n*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // n ::= MINUS DOUBLE 
            { parser.Tree.reduce(2,"n",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*n*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // n ::= MINUS INT 
            { parser.Tree.reduce(2,"n",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*n*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // print ::= PRINT v S 
            { parser.Tree.reduce(3,"print",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp ::= EQ EQ 
            { parser.Tree.reduce(2,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp ::= EQ_MAJ 
            { parser.Tree.reduce(1,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comp ::= MAJ_EQ 
            { parser.Tree.reduce(1,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comp ::= EQ_MIN 
            { parser.Tree.reduce(1,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comp ::= MIN_EQ 
            { parser.Tree.reduce(1,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comp ::= MAJ 
            { parser.Tree.reduce(1,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comp ::= MIN 
            { parser.Tree.reduce(1,"comp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*comp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cond ::= NOT cond 
            { parser.Tree.reduce(2,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cond ::= ex comp ex 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_cond ::= IF RO cond RC i 
            { parser.Tree.reduce(5,"if_cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_cond ::= IF RO cond RC BO il BC 
            { parser.Tree.reduce(7,"if_cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // w_cycle ::= WHILE RO cond RC BO il BC 
            { parser.Tree.reduce(7,"w_cycle",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*w_cycle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opr ::= v 
            { parser.Tree.reduce(1,"opr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*opr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opr ::= n 
            { parser.Tree.reduce(1,"opr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*opr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ex ::= opr 
            { parser.Tree.reduce(1,"ex",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ex*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ex ::= RO ex RC 
            { parser.Tree.reduce(3,"ex",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ex*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ex ::= ex op opr 
            { parser.Tree.reduce(3,"ex",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ex*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // a ::= v EQ ex S 
            { parser.Tree.reduce(4,"a",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*a*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // i ::= print 
            { parser.Tree.reduce(1,"i",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*i*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // i ::= if_cond 
            { parser.Tree.reduce(1,"i",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*i*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // i ::= w_cycle 
            { parser.Tree.reduce(1,"i",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*i*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // i ::= a 
            { parser.Tree.reduce(1,"i",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*i*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // il ::= i 
            { parser.Tree.reduce(1,"il",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*il*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // il ::= il i 
            { parser.Tree.reduce(2,"il",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*il*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"t",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*t*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t ::= INT_TYPE 
            { parser.Tree.reduce(1,"t",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*t*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // v ::= ID 
            { parser.Tree.reduce(1,"v",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // v ::= ID SO ID SC 
            { parser.Tree.reduce(4,"v",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // v ::= ID SO INT SC 
            { parser.Tree.reduce(4,"v",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vl ::= v 
            { parser.Tree.reduce(1,"vl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vl ::= vl CM v 
            { parser.Tree.reduce(3,"vl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // d ::= t vl S 
            { parser.Tree.reduce(3,"d",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*d*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dl ::= d 
            { parser.Tree.reduce(1,"dl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*dl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dl ::= dl d 
            { parser.Tree.reduce(2,"dl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*dl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= dl il 
            { parser.Tree.reduce(2,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

