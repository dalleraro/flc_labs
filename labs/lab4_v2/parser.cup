import java_cup.runtime.*;

parser code {:
   public boolean isCorrect = true;

   public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}
    
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }
:}

action code {:

    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
    }
        
:}

terminal Integer INT_N;
terminal Double DOUBLE_N;
terminal INT_TYPE, DOUBLE_TYPE, IF, ELSE, WHILE, PRINT;
terminal String ID;
terminal RO, RC, SO, SC, CO, CC, CM, S;
terminal PLUS, MINUS, DIV, MUL;
terminal NOT, AND, OR, MAJ, MIN, EQ;
terminal UMINUS;

non terminal prog, decl_l, stmnt_l, decl, stmnt, assign, if_cond, cond, expr, while, while_cond, if, print, var, var_dec_l, var_dec, operand, type, bop;

precedence left PLUS, MINUS;
precedence left MUL, DIV;
precedence left MAJ, MIN, EQ;
precedence left AND, OR, NOT;
precedence left UMINUS;

start with prog;

prog        ::=   decl_l stmnt_l  {: if(parser.isCorrect) System.out.println("Program correctly recognized"); else System.out.println("Parsing finished with warnings"); :};
decl_l      ::=   decl_l decl S | decl S;
stmnt_l     ::=   stmnt_l stmnt | stmnt;
stmnt       ::=   assign S| while | if | print S
              |   assign error   {: pSynWarning("Missing ; before } :"); :}
              |   print error    {: pSynWarning("Missing ; before } :"); :};
decl        ::=   type var_dec_l
              |   type error  {: pSynWarning("Error in declaration"); :}; 
var_dec_l   ::=   var_dec_l CM var_dec | var_dec;
type        ::=   INT_TYPE | DOUBLE_TYPE;
var_dec     ::=   ID | ID SO INT_N SC;
var         ::=   var_dec | ID SO ID SC;
assign      ::=   var EQ expr
              |   var EQ error   {: pSynWarning("Error in assignment"); :};
expr        ::=   expr PLUS expr
              |   expr MINUS expr
              |   expr MUL expr
              |   expr DIV expr
              |   RO expr RC
              |   MINUS expr  %prec UMINUS
              |   operand;
operand     ::=   var | INT_N | DOUBLE_N;
while       ::=   WHILE while_cond CO stmnt_l CC
              |   WHILE while_cond stmnt;
while_cond  ::=   RO cond RC
              |   RO error RC {: pSynWarning("Error in ’while’ condition"); :}
              |   error cond RC  {: pSynWarning("Error ’(’ expected in ’while’ instruction"); :}
              |   RO cond error  {: pSynWarning("Error ’)’ expected in 'while’ instruction"); :};
if          ::=   IF if_cond CO stmnt_l CC ELSE CO stmnt_l CC
              |   IF if_cond stmnt ELSE CO stmnt_l CC
              |   IF if_cond CO stmnt_l CC error   {: pSynWarning("Error ’else’ expected in ’if’ instruction"); :}
              |   IF if_cond stmnt error  {: pSynWarning("Error ’else’ expected in ’if’ instruction"); :};
if_cond     ::=   RO cond RC
              |   RO error RC {: pSynWarning("Error in 'if' condition"); :}
              |   error cond RC  {: pSynWarning("Error ’(’ expected in ’if’ instruction"); :}
              |   RO cond error  {: pSynWarning("Error ’)’ expected in ’if’ instruction"); :};
print       ::=   PRINT var
              |   PRINT error {: pSynWarning("Error in 'print' instruction"); :};
cond        ::=   cond AND cond
              |   cond OR cond
              |   NOT cond
              |   RO cond RC
              |   expr bop expr;
bop         ::=   MAJ | MIN | MAJ EQ | MIN EQ | EQ EQ;
