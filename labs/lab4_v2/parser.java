
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jul 11 11:07:58 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Jul 11 11:07:58 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\003\004\000\002\004" +
    "\005\000\002\004\004\000\002\005\004\000\002\005\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\006\004\000\002\006\004\000\002\021\005\000\002\021" +
    "\003\000\002\024\003\000\002\024\003\000\002\022\003" +
    "\000\002\022\006\000\002\020\003\000\002\020\006\000" +
    "\002\010\005\000\002\010\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\004\000\002\013\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\014\007\000" +
    "\002\014\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\016\013\000\002\016" +
    "\011\000\002\016\010\000\002\016\006\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\017\004\000\002\017\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\006\011\007\004\001\002\000\006\003" +
    "\ufff0\014\ufff0\001\002\000\004\024\171\001\002\000\016" +
    "\006\011\007\004\010\033\012\026\013\036\014\034\001" +
    "\002\000\006\003\014\014\013\001\002\000\004\002\012" +
    "\001\002\000\006\003\ufff1\014\ufff1\001\002\000\004\002" +
    "\001\001\002\000\010\017\021\023\uffef\024\uffef\001\002" +
    "\000\004\024\ufff4\001\002\000\006\023\017\024\ufff5\001" +
    "\002\000\006\023\ufff2\024\ufff2\001\002\000\004\014\013" +
    "\001\002\000\006\023\ufff3\024\ufff3\001\002\000\004\004" +
    "\022\001\002\000\004\020\023\001\002\000\034\003\uffee" +
    "\016\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\001\002" +
    "\000\006\003\167\024\170\001\002\000\022\002\ufff9\003" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\022\ufff9" +
    "\001\002\000\006\003\151\015\152\001\002\000\016\002" +
    "\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\022\ufffc\001\002" +
    "\000\022\002\ufffa\003\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\022\ufffa\001\002\000\014\002\000\010\033" +
    "\012\026\013\036\014\034\001\002\000\032\003\uffed\016" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\001\002\000\006\003" +
    "\076\015\077\001\002\000\034\003\uffef\016\uffef\017\072" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\001\002\000\004\024\071" +
    "\001\002\000\006\003\070\014\034\001\002\000\004\036" +
    "\043\001\002\000\006\003\041\024\042\001\002\000\022" +
    "\002\ufff7\003\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\022\ufff7\001\002\000\022\002\ufffb\003\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\022\ufffb\001\002\000" +
    "\016\003\051\004\046\005\047\014\034\015\045\026\044" +
    "\001\002\000\014\004\046\005\047\014\034\015\045\026" +
    "\044\001\002\000\014\004\046\005\047\014\034\015\045" +
    "\026\044\001\002\000\032\003\uffe1\016\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\001\002\000\032\003\uffe0\016\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\001\002\000\032\003\uffe3\016" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\006\003" +
    "\uffea\024\uffea\001\002\000\016\003\uffeb\024\uffeb\025\054" +
    "\026\056\027\057\030\055\001\002\000\032\003\uffe2\016" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002\000\014\004" +
    "\046\005\047\014\034\015\045\026\044\001\002\000\014" +
    "\004\046\005\047\014\034\015\045\026\044\001\002\000" +
    "\014\004\046\005\047\014\034\015\045\026\044\001\002" +
    "\000\014\004\046\005\047\014\034\015\045\026\044\001" +
    "\002\000\032\003\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\001\002\000\032\003\uffe8\016\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\057\030\055\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\001\002\000\032\003\uffe7\016\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\001\002\000\032\003\uffe9\016\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\057\030\055\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\001\002\000\014\016\065" +
    "\025\054\026\056\027\057\030\055\001\002\000\032\003" +
    "\uffe5\016\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002\000" +
    "\032\003\uffe4\016\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\001" +
    "\002\000\006\003\uffd1\024\uffd1\001\002\000\006\003\uffd0" +
    "\024\uffd0\001\002\000\016\006\uffff\007\uffff\010\uffff\012" +
    "\uffff\013\uffff\014\uffff\001\002\000\006\004\022\014\073" +
    "\001\002\000\004\020\074\001\002\000\032\003\uffec\016" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\001\002\000\014\010" +
    "\033\012\026\013\036\014\034\021\133\001\002\000\016" +
    "\004\046\005\047\014\034\015\100\026\044\031\104\001" +
    "\002\000\020\003\102\004\046\005\047\014\034\015\100" +
    "\026\044\031\104\001\002\000\016\004\046\005\047\014" +
    "\034\015\100\026\044\031\104\001\002\000\012\003\123" +
    "\016\124\032\106\033\107\001\002\000\004\016\122\001" +
    "\002\000\020\025\054\026\056\027\057\030\055\034\112" +
    "\035\113\036\114\001\002\000\016\004\046\005\047\014" +
    "\034\015\100\026\044\031\104\001\002\000\012\003\uffcd" +
    "\016\uffcd\032\uffcd\033\uffcd\001\002\000\016\004\046\005" +
    "\047\014\034\015\100\026\044\031\104\001\002\000\016" +
    "\004\046\005\047\014\034\015\100\026\044\031\104\001" +
    "\002\000\012\003\uffce\016\uffce\032\uffce\033\uffce\001\002" +
    "\000\012\003\uffcf\016\uffcf\032\uffcf\033\uffcf\001\002\000" +
    "\016\004\uffca\005\uffca\014\uffca\015\uffca\026\uffca\036\121" +
    "\001\002\000\016\004\uffc9\005\uffc9\014\uffc9\015\uffc9\026" +
    "\uffc9\036\120\001\002\000\004\036\117\001\002\000\014" +
    "\004\046\005\047\014\034\015\045\026\044\001\002\000" +
    "\022\003\uffcb\016\uffcb\025\054\026\056\027\057\030\055" +
    "\032\uffcb\033\uffcb\001\002\000\014\004\uffc6\005\uffc6\014" +
    "\uffc6\015\uffc6\026\uffc6\001\002\000\014\004\uffc7\005\uffc7" +
    "\014\uffc7\015\uffc7\026\uffc7\001\002\000\014\004\uffc8\005" +
    "\uffc8\014\uffc8\015\uffc8\026\uffc8\001\002\000\014\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\021\uffd4\001\002\000\014\010" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\021\uffd2\001\002\000\014" +
    "\010\uffd5\012\uffd5\013\uffd5\014\uffd5\021\uffd5\001\002\000" +
    "\010\016\127\032\106\033\107\001\002\000\022\016\065" +
    "\025\054\026\056\027\057\030\055\034\112\035\113\036" +
    "\114\001\002\000\012\003\uffcc\016\uffcc\032\uffcc\033\uffcc" +
    "\001\002\000\010\016\131\032\106\033\107\001\002\000" +
    "\014\010\uffd3\012\uffd3\013\uffd3\014\uffd3\021\uffd3\001\002" +
    "\000\006\003\145\011\144\001\002\000\012\010\033\012" +
    "\026\013\036\014\034\001\002\000\014\010\033\012\026" +
    "\013\036\014\034\022\136\001\002\000\016\002\ufffd\010" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\022\ufffd\001\002\000\006" +
    "\003\140\011\137\001\002\000\004\021\141\001\002\000" +
    "\022\002\uffd7\003\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\022\uffd7\001\002\000\012\010\033\012\026\013" +
    "\036\014\034\001\002\000\014\010\033\012\026\013\036" +
    "\014\034\022\143\001\002\000\022\002\uffd9\003\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\022\uffd9\001\002" +
    "\000\004\021\146\001\002\000\022\002\uffd6\003\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\022\uffd6\001\002" +
    "\000\012\010\033\012\026\013\036\014\034\001\002\000" +
    "\014\010\033\012\026\013\036\014\034\022\150\001\002" +
    "\000\022\002\uffd8\003\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\022\uffd8\001\002\000\016\004\046\005\047" +
    "\014\034\015\100\026\044\031\104\001\002\000\020\003" +
    "\160\004\046\005\047\014\034\015\100\026\044\031\104" +
    "\001\002\000\014\010\033\012\026\013\036\014\034\021" +
    "\155\001\002\000\022\002\uffde\003\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\022\uffde\001\002\000\012\010" +
    "\033\012\026\013\036\014\034\001\002\000\014\010\033" +
    "\012\026\013\036\014\034\022\157\001\002\000\022\002" +
    "\uffdf\003\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\022\uffdf\001\002\000\004\016\164\001\002\000\012\003" +
    "\162\016\163\032\106\033\107\001\002\000\014\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\021\uffda\001\002\000\014\010" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\021\uffdd\001\002\000\014" +
    "\010\uffdc\012\uffdc\013\uffdc\014\uffdc\021\uffdc\001\002\000" +
    "\010\016\166\032\106\033\107\001\002\000\014\010\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\021\uffdb\001\002\000\022\002" +
    "\ufff6\003\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\022\ufff6\001\002\000\022\002\ufff8\003\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\022\ufff8\001\002\000\016" +
    "\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\012\003\007\004\005\006\004\024\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\030" +
    "\006\034\007\026\010\037\014\027\016\024\017\023\020" +
    "\036\022\031\024\006\001\001\000\006\021\014\022\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\134" +
    "\010\037\014\027\016\024\017\023\020\036\022\031\001" +
    "\001\000\002\001\001\000\004\011\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\066\022\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\051\020\052\022\031\023" +
    "\047\001\001\000\012\013\065\020\052\022\031\023\047" +
    "\001\001\000\012\013\063\020\052\022\031\023\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\062\020\052\022\031\023\047\001\001\000\012" +
    "\013\061\020\052\022\031\023\047\001\001\000\012\013" +
    "\060\020\052\022\031\023\047\001\001\000\012\013\057" +
    "\020\052\022\031\023\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\131\010" +
    "\037\014\027\016\024\017\023\020\036\022\031\001\001" +
    "\000\014\012\127\013\102\020\052\022\031\023\047\001" +
    "\001\000\014\012\100\013\102\020\052\022\031\023\047" +
    "\001\001\000\014\012\124\013\125\020\052\022\031\023" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\114\001\001\000\014\012\104\013\102\020\052\022" +
    "\031\023\047\001\001\000\002\001\001\000\014\012\110" +
    "\013\102\020\052\022\031\023\047\001\001\000\014\012" +
    "\107\013\102\020\052\022\031\023\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\115\020\052\022\031" +
    "\023\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\133\007\026\010" +
    "\037\014\027\016\024\017\023\020\036\022\031\001\001" +
    "\000\020\007\134\010\037\014\027\016\024\017\023\020" +
    "\036\022\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\141\007" +
    "\026\010\037\014\027\016\024\017\023\020\036\022\031" +
    "\001\001\000\020\007\134\010\037\014\027\016\024\017" +
    "\023\020\036\022\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\146\007\026\010" +
    "\037\014\027\016\024\017\023\020\036\022\031\001\001" +
    "\000\020\007\134\010\037\014\027\016\024\017\023\020" +
    "\036\022\031\001\001\000\002\001\001\000\014\012\164" +
    "\013\102\020\052\022\031\023\047\001\001\000\014\012" +
    "\160\013\102\020\052\022\031\023\047\001\001\000\020" +
    "\007\153\010\037\014\027\016\024\017\023\020\036\022" +
    "\031\001\001\000\002\001\001\000\022\005\155\007\026" +
    "\010\037\014\027\016\024\017\023\020\036\022\031\001" +
    "\001\000\020\007\134\010\037\014\027\016\024\017\023" +
    "\020\036\022\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public boolean isCorrect = true;

   public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}
    
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
    }
        

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bop ::= EQ EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bop ::= MIN EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bop ::= MAJ EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bop ::= MIN 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bop ::= MAJ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond ::= expr bop expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond ::= RO cond RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond ::= NOT cond 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond ::= cond OR cond 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= cond AND cond 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // print ::= PRINT error 
            { 
              Object RESULT = null;
		 pSynWarning("Error in 'print' instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // print ::= PRINT var 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if_cond ::= RO cond error 
            { 
              Object RESULT = null;
		 pSynWarning("Error â)â expected in âifâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_cond ::= error cond RC 
            { 
              Object RESULT = null;
		 pSynWarning("Error â(â expected in âifâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_cond ::= RO error RC 
            { 
              Object RESULT = null;
		 pSynWarning("Error in 'if' condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_cond ::= RO cond RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= IF if_cond stmnt error 
            { 
              Object RESULT = null;
		 pSynWarning("Error âelseâ expected in âifâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IF if_cond CO stmnt_l CC error 
            { 
              Object RESULT = null;
		 pSynWarning("Error âelseâ expected in âifâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF if_cond stmnt ELSE CO stmnt_l CC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF if_cond CO stmnt_l CC ELSE CO stmnt_l CC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_cond ::= RO cond error 
            { 
              Object RESULT = null;
		 pSynWarning("Error â)â expected in 'whileâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_cond ::= error cond RC 
            { 
              Object RESULT = null;
		 pSynWarning("Error â(â expected in âwhileâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while_cond ::= RO error RC 
            { 
              Object RESULT = null;
		 pSynWarning("Error in âwhileâ condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while_cond ::= RO cond RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while ::= WHILE while_cond stmnt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while ::= WHILE while_cond CO stmnt_l CC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operand ::= DOUBLE_N 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operand ::= INT_N 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operand ::= var 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= operand 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= MINUS expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= RO expr RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DIV expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MUL expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr MINUS expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr PLUS expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign ::= var EQ error 
            { 
              Object RESULT = null;
		 pSynWarning("Error in assignment"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assign ::= var EQ expr 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var ::= ID SO ID SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var ::= var_dec 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_dec ::= ID SO INT_N SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*var_dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_dec ::= ID 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*var_dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= DOUBLE_TYPE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INT_TYPE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_dec_l ::= var_dec 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*var_dec_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_dec_l ::= var_dec_l CM var_dec 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*var_dec_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= type error 
            { 
              Object RESULT = null;
		 pSynWarning("Error in declaration"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= type var_dec_l 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmnt ::= print error 
            { 
              Object RESULT = null;
		 pSynWarning("Missing ; before } :"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmnt ::= assign error 
            { 
              Object RESULT = null;
		 pSynWarning("Missing ; before } :"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmnt ::= print S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmnt ::= if 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmnt ::= while 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmnt ::= assign S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmnt_l ::= stmnt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmnt_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmnt_l ::= stmnt_l stmnt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmnt_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_l ::= decl S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*decl_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_l ::= decl_l decl S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*decl_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl_l stmnt_l 
            { 
              Object RESULT = null;
		 if(parser.isCorrect) System.out.println("Program correctly recognized"); else System.out.println("Parsing finished with warnings"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

