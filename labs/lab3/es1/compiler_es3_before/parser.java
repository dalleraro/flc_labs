
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 14 17:58:47 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Wed Jun 14 17:58:47 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\003\004\000\002\004" +
    "\004\000\002\004\003\000\002\006\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\006\000\002\012\003\000" +
    "\002\010\003\000\002\010\003\000\002\005\004\000\002" +
    "\005\003\000\002\007\003\000\002\013\006\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\006\042\010\043\004\001\002\000\004\006" +
    "\ufff7\001\002\000\010\006\013\042\010\043\004\001\002" +
    "\000\004\006\013\001\002\000\004\002\012\001\002\000" +
    "\004\006\ufff8\001\002\000\010\006\ufffe\042\ufffe\043\ufffe" +
    "\001\002\000\004\002\001\001\002\000\012\021\ufff9\022" +
    "\021\023\ufff9\036\ufff9\001\002\000\006\021\ufffb\023\ufffb" +
    "\001\002\000\006\021\016\023\017\001\002\000\004\006" +
    "\013\001\002\000\010\006\ufffd\042\ufffd\043\ufffd\001\002" +
    "\000\006\021\ufffc\023\ufffc\001\002\000\004\004\022\001" +
    "\002\000\004\020\023\001\002\000\010\021\ufffa\023\ufffa" +
    "\036\ufffa\001\002\000\006\002\ufff5\006\ufff5\001\002\000" +
    "\010\006\uffff\042\uffff\043\uffff\001\002\000\006\002\000" +
    "\006\013\001\002\000\006\002\ufff4\006\ufff4\001\002\000" +
    "\004\036\031\001\002\000\010\004\036\005\032\014\034" +
    "\001\002\000\016\015\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\001\002\000\014\023\047\024\041\025\042" +
    "\026\040\027\043\001\002\000\010\004\036\005\032\014" +
    "\034\001\002\000\016\015\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\001\002\000\016\015\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\001\002\000\014\015\044" +
    "\024\041\025\042\026\040\027\043\001\002\000\006\004" +
    "\uffeb\005\uffeb\001\002\000\006\004\uffed\005\uffed\001\002" +
    "\000\006\004\uffec\005\uffec\001\002\000\006\004\uffea\005" +
    "\uffea\001\002\000\016\015\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\001\002\000\006\004\036\005\032\001" +
    "\002\000\016\015\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\001\002\000\006\002\ufff3\006\ufff3\001\002\000" +
    "\006\002\ufff6\006\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\012\003\006\004\004\006\010\010\005\001" +
    "\001\000\002\001\001\000\016\005\025\006\024\007\023" +
    "\010\005\012\027\013\026\001\001\000\006\011\014\012" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\047\012\027\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\032\015\034\001\001" +
    "\000\002\001\001\000\004\016\044\001\001\000\006\014" +
    "\036\015\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op ::= DIV 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op ::= STAR 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op ::= MINUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= PLUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // n ::= DOUBLE 
            { parser.Tree.reduce(1,"n",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*n*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // n ::= INT 
            { parser.Tree.reduce(1,"n",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*n*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ex ::= n 
            { parser.Tree.reduce(1,"ex",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ex*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ex ::= RO ex RC 
            { parser.Tree.reduce(3,"ex",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ex*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ex ::= ex op n 
            { parser.Tree.reduce(3,"ex",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ex*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // a ::= v EQ ex S 
            { parser.Tree.reduce(4,"a",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*a*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // i ::= a 
            { parser.Tree.reduce(1,"i",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*i*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // il ::= i 
            { parser.Tree.reduce(1,"il",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*il*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // il ::= il i 
            { parser.Tree.reduce(2,"il",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*il*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"t",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*t*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t ::= INT_TYPE 
            { parser.Tree.reduce(1,"t",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*t*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // v ::= ID 
            { parser.Tree.reduce(1,"v",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // v ::= ID SO INT SC 
            { parser.Tree.reduce(4,"v",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vl ::= v 
            { parser.Tree.reduce(1,"vl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vl ::= vl CM v 
            { parser.Tree.reduce(3,"vl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // d ::= t vl S 
            { parser.Tree.reduce(3,"d",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*d*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dl ::= d 
            { parser.Tree.reduce(1,"dl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*dl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dl ::= dl d 
            { parser.Tree.reduce(2,"dl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*dl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= dl il 
            { parser.Tree.reduce(2,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

