
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jul 10 15:18:19 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon Jul 10 15:18:19 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\006\004\000\002\016\005\000\002\016\003\000\002" +
    "\021\003\000\002\021\003\000\002\017\003\000\002\017" +
    "\006\000\002\015\003\000\002\015\006\000\002\007\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\012\011\000\002\012\007\000\002\013\011" +
    "\000\002\013\007\000\002\014\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\004\000\002\010\005\000\002" +
    "\010\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\016\006\007\007\011\010\015\011\006\012" +
    "\021\013\016\001\002\000\022\002\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\021\ufffa\001\002\000" +
    "\004\023\131\001\002\000\004\014\122\001\002\000\004" +
    "\013\ufff5\001\002\000\020\002\000\006\007\007\011\010" +
    "\015\011\006\012\021\013\016\001\002\000\004\013\ufff4" +
    "\001\002\000\022\002\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\021\ufffb\001\002\000\004\002\121" +
    "\001\002\000\030\015\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\001\002\000\004\014\066\001\002\000\032\015\ufff3\016" +
    "\063\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\001\002\000\004\013" +
    "\053\001\002\000\004\023\052\001\002\000\004\013\016" +
    "\001\002\000\022\002\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\021\ufffe\001\002\000\004\035\026" +
    "\001\002\000\004\023\025\001\002\000\022\002\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\021\ufffc" +
    "\001\002\000\014\004\031\005\032\013\016\014\027\025" +
    "\030\001\002\000\014\004\031\005\032\013\016\014\027" +
    "\025\030\001\002\000\014\004\031\005\032\013\016\014" +
    "\027\025\030\001\002\000\030\015\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\001\002\000\030\015\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\001\002\000\030\015\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\001\002\000\014\023\uffef\024\036\025\040" +
    "\026\041\027\037\001\002\000\030\015\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\001\002\000\014\004\031\005\032\013" +
    "\016\014\027\025\030\001\002\000\014\004\031\005\032" +
    "\013\016\014\027\025\030\001\002\000\014\004\031\005" +
    "\032\013\016\014\027\025\030\001\002\000\014\004\031" +
    "\005\032\013\016\014\027\025\030\001\002\000\030\015" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\001\002\000\030\015" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\041\027\037\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\001\002\000\030\015" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\001\002\000\030\015" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\041\027\037\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\001\002\000\030\015" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002\000\014\015" +
    "\050\024\036\025\040\026\041\027\037\001\002\000\030" +
    "\015\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\001\002\000\004" +
    "\023\uffe0\001\002\000\022\002\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\021\ufffd\001\002\000\010" +
    "\016\060\022\ufff3\023\ufff3\001\002\000\006\022\056\023" +
    "\ufff8\001\002\000\006\022\ufff6\023\ufff6\001\002\000\004" +
    "\013\053\001\002\000\006\022\ufff7\023\ufff7\001\002\000" +
    "\004\004\061\001\002\000\004\017\062\001\002\000\032" +
    "\015\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\001\002" +
    "\000\006\004\061\013\064\001\002\000\004\017\065\001" +
    "\002\000\030\015\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\001" +
    "\002\000\016\004\031\005\032\013\016\014\067\025\030" +
    "\030\071\001\002\000\016\004\031\005\032\013\016\014" +
    "\067\025\030\030\071\001\002\000\010\015\110\031\104" +
    "\032\105\001\002\000\016\004\031\005\032\013\016\014" +
    "\067\025\030\030\071\001\002\000\020\024\036\025\040" +
    "\026\041\027\037\033\073\034\074\035\075\001\002\000" +
    "\016\004\uffda\005\uffda\013\uffda\014\uffda\025\uffda\035\102" +
    "\001\002\000\016\004\uffd9\005\uffd9\013\uffd9\014\uffd9\025" +
    "\uffd9\035\101\001\002\000\004\035\100\001\002\000\014" +
    "\004\031\005\032\013\016\014\027\025\030\001\002\000" +
    "\020\015\uffdb\024\036\025\040\026\041\027\037\031\uffdb" +
    "\032\uffdb\001\002\000\014\004\uffd6\005\uffd6\013\uffd6\014" +
    "\uffd6\025\uffd6\001\002\000\014\004\uffd7\005\uffd7\013\uffd7" +
    "\014\uffd7\025\uffd7\001\002\000\014\004\uffd8\005\uffd8\013" +
    "\uffd8\014\uffd8\025\uffd8\001\002\000\010\015\uffdd\031\uffdd" +
    "\032\uffdd\001\002\000\016\004\031\005\032\013\016\014" +
    "\067\025\030\030\071\001\002\000\016\004\031\005\032" +
    "\013\016\014\067\025\030\030\071\001\002\000\010\015" +
    "\uffde\031\uffde\032\uffde\001\002\000\010\015\uffdf\031\uffdf" +
    "\032\uffdf\001\002\000\020\006\007\007\011\010\015\011" +
    "\006\012\021\013\016\020\111\001\002\000\016\006\007" +
    "\007\011\010\015\011\006\012\021\013\016\001\002\000" +
    "\022\002\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\021\uffe1\001\002\000\020\006\007\007\011\010" +
    "\015\011\006\012\021\013\016\021\114\001\002\000\022" +
    "\002\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\021\uffe2\001\002\000\022\002\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\021\uffff\001\002\000" +
    "\010\015\120\031\104\032\105\001\002\000\022\015\050" +
    "\024\036\025\040\026\041\027\037\033\073\034\074\035" +
    "\075\001\002\000\010\015\uffdc\031\uffdc\032\uffdc\001\002" +
    "\000\004\002\001\001\002\000\016\004\031\005\032\013" +
    "\016\014\067\025\030\030\071\001\002\000\010\015\124" +
    "\031\104\032\105\001\002\000\020\006\007\007\011\010" +
    "\015\011\006\012\021\013\016\020\125\001\002\000\016" +
    "\006\007\007\011\010\015\011\006\012\021\013\016\001" +
    "\002\000\022\002\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\021\uffe3\001\002\000\020\006\007\007" +
    "\011\010\015\011\006\012\021\013\016\021\130\001\002" +
    "\000\022\002\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\021\uffe4\001\002\000\022\002\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\021\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\030\003\012\004\007\005\021\006\017\007" +
    "\023\012\011\013\003\014\004\015\022\017\013\021\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\114\006\017\007\023" +
    "\012\011\013\003\014\004\015\022\017\013\021\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\053\017\054\001\001\000\002\001\001\000\006" +
    "\015\050\017\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\033" +
    "\015\034\017\013\020\032\001\001\000\012\011\046\015" +
    "\034\017\013\020\032\001\001\000\012\011\045\015\034" +
    "\017\013\020\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\044\015\034\017\013\020\032\001\001\000" +
    "\012\011\043\015\034\017\013\020\032\001\001\000\012" +
    "\011\042\015\034\017\013\020\032\001\001\000\012\011" +
    "\041\015\034\017\013\020\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\067\011\071\015\034\017\013\020\032\001" +
    "\001\000\014\010\115\011\116\015\034\017\013\020\032" +
    "\001\001\000\002\001\001\000\014\010\102\011\071\015" +
    "\034\017\013\020\032\001\001\000\004\022\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\076\015\034\017\013\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\106\011\071\015\034" +
    "\017\013\020\032\001\001\000\014\010\105\011\071\015" +
    "\034\017\013\020\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\111\006\017\007\023\012\011\013" +
    "\003\014\004\015\022\017\013\021\016\001\001\000\026" +
    "\004\112\005\021\006\017\007\023\012\011\013\003\014" +
    "\004\015\022\017\013\021\016\001\001\000\002\001\001" +
    "\000\024\005\114\006\017\007\023\012\011\013\003\014" +
    "\004\015\022\017\013\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\122" +
    "\011\071\015\034\017\013\020\032\001\001\000\002\001" +
    "\001\000\024\005\125\006\017\007\023\012\011\013\003" +
    "\014\004\015\022\017\013\021\016\001\001\000\026\004" +
    "\126\005\021\006\017\007\023\012\011\013\003\014\004" +
    "\015\022\017\013\021\016\001\001\000\002\001\001\000" +
    "\024\005\114\006\017\007\023\012\011\013\003\014\004" +
    "\015\022\017\013\021\016\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   public void syntax_error(Symbol current_symbol) {
      StringBuffer m = new StringBuffer("Error");

      if (current_symbol.left != -1) {                
         m.append(" in line " + (current_symbol.left+1));   
	      m.append(", column " + (current_symbol.right+1));
      }
      m.append(", symbol: " + (current_symbol));
      m.append(" : Syntax Error");
   
  	System.err.println(m);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bop ::= EQ EQ 
            { parser.Tree.reduce(2,"bop",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bop ::= MIN EQ 
            { parser.Tree.reduce(2,"bop",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bop ::= MAJ EQ 
            { parser.Tree.reduce(2,"bop",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bop ::= MIN 
            { parser.Tree.reduce(1,"bop",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bop ::= MAJ 
            { parser.Tree.reduce(1,"bop",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= expr bop expr 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= RO cond RC 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= NOT cond 
            { parser.Tree.reduce(2,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= cond OR cond 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= cond AND cond 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print ::= PRINT var 
            { parser.Tree.reduce(2,"print",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF RO cond RC instr 
            { parser.Tree.reduce(5,"if",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF RO cond RC CO instr_list CC 
            { parser.Tree.reduce(7,"if",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while ::= WHILE RO cond RC instr 
            { parser.Tree.reduce(5,"while",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // while ::= WHILE RO cond RC CO instr_list CC 
            { parser.Tree.reduce(7,"while",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operand ::= DOUBLE_N 
            { parser.Tree.reduce(1,"operand",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operand ::= INT_N 
            { parser.Tree.reduce(1,"operand",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operand ::= var 
            { parser.Tree.reduce(1,"operand",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= operand 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= MINUS expr 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= RO expr RC 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr DIV expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MUL expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr MINUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assign ::= var EQ expr 
            { parser.Tree.reduce(3,"assign",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var ::= ID SO ID SC 
            { parser.Tree.reduce(4,"var",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var ::= var_dec 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_dec ::= ID SO INT_N SC 
            { parser.Tree.reduce(4,"var_dec",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*var_dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_dec ::= ID 
            { parser.Tree.reduce(1,"var_dec",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*var_dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT_TYPE 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_dec_l ::= var_dec 
            { parser.Tree.reduce(1,"var_dec_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*var_dec_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_dec_l ::= var_dec_l CM var_dec 
            { parser.Tree.reduce(3,"var_dec_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*var_dec_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= type var_dec_l 
            { parser.Tree.reduce(2,"decl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= print S 
            { parser.Tree.reduce(2,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= if 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= while 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= assign S 
            { parser.Tree.reduce(2,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instr ::= decl S 
            { parser.Tree.reduce(2,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instr_list ::= instr 
            { parser.Tree.reduce(1,"instr_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*instr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instr_list ::= instr_list instr 
            { parser.Tree.reduce(2,"instr_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*instr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= instr_list 
            { parser.Tree.reduce(1,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

