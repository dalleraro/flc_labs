
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jul 12 12:11:55 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Wed Jul 12 12:11:55 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\003\004\000\002\004" +
    "\005\000\002\004\004\000\002\005\004\000\002\005\003" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\006\004\000\002\006\004\000\002\032\002\000\002\017" +
    "\006\000\002\017\003\000\002\016\003\000\002\016\003" +
    "\000\002\020\003\000\002\020\006\000\002\021\003\000" +
    "\002\021\006\000\002\010\005\000\002\010\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\004\000\002\023\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\012\010\000\002\012\006\000\002\027\002\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\033\002\000\002\013\012\000\002\013\007" +
    "\000\002\015\007\000\002\015\005\000\002\015\002\000" +
    "\002\030\002\000\002\031\002\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\014" +
    "\004\000\002\014\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\005\000\002\025\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\006\011\007\004\001\002\000\006\003" +
    "\uffef\014\uffef\001\002\000\004\024\173\001\002\000\016" +
    "\006\011\007\004\010\034\012\027\013\037\014\035\001" +
    "\002\000\006\003\014\014\013\001\002\000\004\002\012" +
    "\001\002\000\006\003\ufff0\014\ufff0\001\002\000\004\002" +
    "\001\001\002\000\010\017\022\023\uffee\024\uffee\001\002" +
    "\000\004\024\ufff4\001\002\000\006\023\017\024\ufff5\001" +
    "\002\000\006\023\ufff1\024\ufff1\001\002\000\004\014\ufff3" +
    "\001\002\000\004\014\013\001\002\000\006\023\ufff2\024" +
    "\ufff2\001\002\000\004\004\023\001\002\000\004\020\024" +
    "\001\002\000\034\003\uffed\016\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\001\002\000\006\003\171\024\172\001" +
    "\002\000\020\002\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\022\ufff9\001\002\000\006\003\152\015\153\001" +
    "\002\000\016\002\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\022\ufffc\001\002\000\020\002\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\022\ufffa\001\002\000\014\002\000" +
    "\010\034\012\027\013\037\014\035\001\002\000\032\003" +
    "\uffec\016\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\001\002\000" +
    "\006\003\077\015\100\001\002\000\034\003\uffee\016\uffee" +
    "\017\073\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\001\002\000\004" +
    "\024\072\001\002\000\006\003\070\014\035\001\002\000" +
    "\004\036\044\001\002\000\006\003\042\024\043\001\002" +
    "\000\020\002\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\022\ufff7\001\002\000\020\002\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\022\ufffb\001\002\000\016\003" +
    "\052\004\047\005\050\014\035\015\045\026\046\001\002" +
    "\000\014\004\047\005\050\014\035\015\045\026\046\001" +
    "\002\000\014\004\047\005\050\014\035\015\045\026\046" +
    "\001\002\000\032\003\uffe0\016\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\001\002\000\032\003\uffdf\016\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\001\002\000\032\003\uffe2\016\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\001\002\000\006\003\uffe9\024" +
    "\uffe9\001\002\000\016\003\uffea\024\uffea\025\055\026\057" +
    "\027\060\030\056\001\002\000\032\003\uffe1\016\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\001\002\000\014\004\047\005" +
    "\050\014\035\015\045\026\046\001\002\000\014\004\047" +
    "\005\050\014\035\015\045\026\046\001\002\000\014\004" +
    "\047\005\050\014\035\015\045\026\046\001\002\000\014" +
    "\004\047\005\050\014\035\015\045\026\046\001\002\000" +
    "\032\003\uffe5\016\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\001" +
    "\002\000\032\003\uffe7\016\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\060\030\056\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\001\002\000\032\003\uffe6\016\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\001\002\000\032\003\uffe8\016\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\060\030\056\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\001\002\000\032\003\uffe3\016\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\014\016\067" +
    "\025\055\026\057\027\060\030\056\001\002\000\032\003" +
    "\uffe4\016\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002\000" +
    "\006\003\uffca\024\uffca\001\002\000\006\003\uffcb\024\uffcb" +
    "\001\002\000\016\006\uffff\007\uffff\010\uffff\012\uffff\013" +
    "\uffff\014\uffff\001\002\000\006\004\023\014\074\001\002" +
    "\000\004\020\075\001\002\000\032\003\uffeb\016\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\001\002\000\014\010\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\021\uffd1\001\002\000\016\004\047" +
    "\005\050\014\035\015\101\026\046\031\105\001\002\000" +
    "\020\003\102\004\047\005\050\014\035\015\101\026\046" +
    "\031\105\001\002\000\016\004\047\005\050\014\035\015" +
    "\101\026\046\031\105\001\002\000\004\016\125\001\002" +
    "\000\012\003\123\016\124\032\107\033\110\001\002\000" +
    "\020\025\055\026\057\027\060\030\056\034\113\035\114" +
    "\036\115\001\002\000\016\004\047\005\050\014\035\015" +
    "\101\026\046\031\105\001\002\000\012\003\uffc7\016\uffc7" +
    "\032\uffc7\033\uffc7\001\002\000\016\004\047\005\050\014" +
    "\035\015\101\026\046\031\105\001\002\000\016\004\047" +
    "\005\050\014\035\015\101\026\046\031\105\001\002\000" +
    "\012\003\uffc8\016\uffc8\032\uffc8\033\uffc8\001\002\000\012" +
    "\003\uffc9\016\uffc9\032\uffc9\033\uffc9\001\002\000\016\004" +
    "\uffc4\005\uffc4\014\uffc4\015\uffc4\026\uffc4\036\122\001\002" +
    "\000\016\004\uffc3\005\uffc3\014\uffc3\015\uffc3\026\uffc3\036" +
    "\121\001\002\000\004\036\120\001\002\000\014\004\047" +
    "\005\050\014\035\015\045\026\046\001\002\000\022\003" +
    "\uffc5\016\uffc5\025\055\026\057\027\060\030\056\032\uffc5" +
    "\033\uffc5\001\002\000\014\004\uffc0\005\uffc0\014\uffc0\015" +
    "\uffc0\026\uffc0\001\002\000\014\004\uffc1\005\uffc1\014\uffc1" +
    "\015\uffc1\026\uffc1\001\002\000\014\004\uffc2\005\uffc2\014" +
    "\uffc2\015\uffc2\026\uffc2\001\002\000\014\010\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\021\uffcc\001\002\000\014\010\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\021\uffcf\001\002\000\014\010\uffce" +
    "\012\uffce\013\uffce\014\uffce\021\uffce\001\002\000\010\016" +
    "\130\032\107\033\110\001\002\000\022\016\067\025\055" +
    "\026\057\027\060\030\056\034\113\035\114\036\115\001" +
    "\002\000\012\003\uffc6\016\uffc6\032\uffc6\033\uffc6\001\002" +
    "\000\010\016\132\032\107\033\110\001\002\000\014\010" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\021\uffcd\001\002\000\014" +
    "\010\034\012\027\013\037\014\035\021\135\001\002\000" +
    "\020\002\uffd2\010\uffd2\011\142\012\uffd2\013\uffd2\014\uffd2" +
    "\022\uffd2\001\002\000\012\010\034\012\027\013\037\014" +
    "\035\001\002\000\014\010\034\012\027\013\037\014\035" +
    "\022\uffd7\001\002\000\016\002\ufffd\010\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\022\ufffd\001\002\000\004\022\141\001\002" +
    "\000\020\002\uffd2\010\uffd2\011\142\012\uffd2\013\uffd2\014" +
    "\uffd2\022\uffd2\001\002\000\014\010\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\021\uffd0\001\002\000\020\002\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\022\uffd6\001\002\000\014" +
    "\010\034\012\027\013\037\014\035\021\146\001\002\000" +
    "\020\002\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\022\uffd3\001\002\000\012\010\034\012\027\013\037\014" +
    "\035\001\002\000\014\010\034\012\027\013\037\014\035" +
    "\022\150\001\002\000\020\002\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\022\uffd4\001\002\000\020\002\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\022\uffd5\001" +
    "\002\000\016\004\047\005\050\014\035\015\101\026\046" +
    "\031\105\001\002\000\020\003\162\004\047\005\050\014" +
    "\035\015\101\026\046\031\105\001\002\000\014\010\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\021\uffdc\001\002\000\014\010" +
    "\034\012\027\013\037\014\035\021\157\001\002\000\020" +
    "\002\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\022" +
    "\uffdd\001\002\000\012\010\034\012\027\013\037\014\035" +
    "\001\002\000\014\010\034\012\027\013\037\014\035\022" +
    "\161\001\002\000\020\002\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\022\uffde\001\002\000\004\016\166\001" +
    "\002\000\012\003\164\016\165\032\107\033\110\001\002" +
    "\000\014\010\uffd8\012\uffd8\013\uffd8\014\uffd8\021\uffd8\001" +
    "\002\000\014\010\uffdb\012\uffdb\013\uffdb\014\uffdb\021\uffdb" +
    "\001\002\000\014\010\uffda\012\uffda\013\uffda\014\uffda\021" +
    "\uffda\001\002\000\010\016\170\032\107\033\110\001\002" +
    "\000\014\010\uffd9\012\uffd9\013\uffd9\014\uffd9\021\uffd9\001" +
    "\002\000\020\002\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\022\ufff6\001\002\000\020\002\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\022\ufff8\001\002\000\016" +
    "\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\012\003\007\004\005\006\004\016\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\031" +
    "\006\035\007\027\010\040\012\030\013\025\014\024\016" +
    "\006\020\032\021\037\001\001\000\006\017\014\020\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\017\001\001\000\004\020" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\136\010\040\012\030\013\025\014" +
    "\024\020\032\021\037\001\001\000\002\001\001\000\004" +
    "\011\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\032\021\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\032\021\053\022\050\023\052\001\001\000\012\020\032" +
    "\021\053\022\050\023\065\001\001\000\012\020\032\021" +
    "\053\022\050\023\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\032\021\053\022\050" +
    "\023\063\001\001\000\012\020\032\021\053\022\050\023" +
    "\062\001\001\000\012\020\032\021\053\022\050\023\061" +
    "\001\001\000\012\020\032\021\053\022\050\023\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\132\001\001\000\014\020\032\021\053" +
    "\022\050\023\103\025\130\001\001\000\014\020\032\021" +
    "\053\022\050\023\103\025\102\001\001\000\014\020\032" +
    "\021\053\022\050\023\126\025\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\115\001\001\000\014" +
    "\020\032\021\053\022\050\023\103\025\105\001\001\000" +
    "\002\001\001\000\014\020\032\021\053\022\050\023\103" +
    "\025\111\001\001\000\014\020\032\021\053\022\050\023" +
    "\103\025\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\032\021\053\022\050\023\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\133" +
    "\010\040\012\030\013\025\014\024\020\032\021\037\001" +
    "\001\000\004\015\150\001\001\000\022\005\135\007\027" +
    "\010\040\012\030\013\025\014\024\020\032\021\037\001" +
    "\001\000\022\007\136\010\040\012\030\013\025\014\024" +
    "\020\032\021\037\033\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\142\001\001\000\004\031\143" +
    "\001\001\000\002\001\001\000\020\007\144\010\040\012" +
    "\030\013\025\014\024\020\032\021\037\001\001\000\002" +
    "\001\001\000\022\005\146\007\027\010\040\012\030\013" +
    "\025\014\024\020\032\021\037\001\001\000\020\007\136" +
    "\010\040\012\030\013\025\014\024\020\032\021\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\032" +
    "\021\053\022\050\023\103\025\166\001\001\000\014\020" +
    "\032\021\053\022\050\023\103\025\162\001\001\000\004" +
    "\027\154\001\001\000\020\007\155\010\040\012\030\013" +
    "\025\014\024\020\032\021\037\001\001\000\002\001\001" +
    "\000\022\005\157\007\027\010\040\012\030\013\025\014" +
    "\024\020\032\021\037\001\001\000\020\007\136\010\040" +
    "\012\030\013\025\014\024\020\032\021\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    outputBuffer = new StringBuffer();

    }


   public boolean isCorrect = true;

   public int label = 0;
   
   public static String dumpOutput;

   public boolean enableSem = true;
   
   public StringBuffer outputBuffer;
   
   public int genLabel(){
        label++;
        return label;
   };

   public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}
    
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
    
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



    private void disableSem(){
        parser.enableSem = false;
    }
    
    private boolean sem(){
        return parser.enableSem;
    }

   private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);

        parser.done_parsing();
    }
    
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }

    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        disableSem();
    }
    
    private void dump(String s){
        parser.outputBuffer.append(s);
        System.out.print(s);
    }

    private void dumpln(String s){
        parser.outputBuffer.append(s+"\n");
        System.out.println(s);
    }
        

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bop ::= EQ EQ 
            { 
              String RESULT = null;
		 RESULT = "=="; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bop ::= MIN EQ 
            { 
              String RESULT = null;
		 RESULT = "<="; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bop ::= MAJ EQ 
            { 
              String RESULT = null;
		 RESULT = ">="; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bop ::= MIN 
            { 
              String RESULT = null;
		 RESULT = "<"; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bop ::= MAJ 
            { 
              String RESULT = null;
		 RESULT = ">"; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*bop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= expr bop expr 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(x+" "+y+" "+op); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= RO cond RC 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= NOT cond 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(x+" !"); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= cond OR cond 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(x+" "+y+" |"); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond ::= cond AND cond 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(x+" "+y+" &"); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // print ::= PRINT error 
            { 
              Object RESULT = null;
		 pSynWarning("Error in 'print' instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // print ::= PRINT var 
            { 
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 dumpln("PRINT "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if_cond ::= RO cond error 
            { 
              Object RESULT = null;
		 pSynWarning("Error â)â expected in âifâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_cond ::= error cond RC 
            { 
              Object RESULT = null;
		 pSynWarning("Error â(â expected in âifâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_cond ::= RO error RC 
            { 
              Object RESULT = null;
		 pSynWarning("Error in 'if' condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_cond ::= RO cond RC 
            { 
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nt1_if ::= 
            { 
              Integer RESULT = null;
		 Integer l = parser.genLabel();
                     dumpln("GOTO L"+l);
                     dumpln("L"+(Integer)parser.stack(-2)+":");
                     RESULT = l;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(23/*nt1_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nt0_if ::= 
            { 
              Integer RESULT = null;
		 Integer l = parser.genLabel();
                     dumpln("EVAL "+(String)parser.stack(0));
                     dumpln("GOTOF L"+l);
                     RESULT = l;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(22/*nt0_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else ::= 
            { 
              Object RESULT = null;
		 
                     dumpln("L"+(Integer)parser.stack(-1)+":");
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else ::= ELSE nt1_if stmnt 
            { 
              Object RESULT = null;
		
                     dumpln("L"+(Integer)parser.stack(-1)+":");
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else ::= ELSE nt1_if CO stmnt_l CC 
            { 
              Object RESULT = null;
		
                     dumpln("L"+(Integer)parser.stack(-3)+":");
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if ::= IF if_cond nt0_if stmnt else 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= IF if_cond nt0_if CO stmnt_l NT$1 CC else 
            { 
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            { 
              Object RESULT = null;
 RESULT = (Integer)parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while_cond ::= RO cond error 
            { 
              String RESULT = null;
		 pSynWarning("Error â)â expected in 'whileâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // while_cond ::= error cond RC 
            { 
              String RESULT = null;
		 pSynWarning("Error â(â expected in âwhileâ instruction"); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_cond ::= RO error RC 
            { 
              String RESULT = null;
		 pSynWarning("Error in âwhileâ condition"); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_cond ::= RO cond RC 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*while_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nt0_while ::= 
            { 
              Integer[] RESULT = null;
		 
         Integer[] l = new Integer[2];
         l[0] = parser.genLabel();
         l[1] = parser.genLabel();
         dumpln("L"+l[0]+":");
         dumpln("EVAL "+(String)parser.stack(0));
         dumpln("GOTOF L"+l[1]);
         RESULT = l;
      
              CUP$parser$result = new java_cup.runtime.Symbol(21/*nt0_while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while ::= WHILE while_cond nt0_while stmnt 
            { 
              Object RESULT = null;
		 
         Integer[] l = (Integer[])parser.stack(-1);
         dumpln("GOTO L" + l[0]);
         dumpln("L"+l[1]+":");
      
              CUP$parser$result = new java_cup.runtime.Symbol(8/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // while ::= WHILE while_cond nt0_while CO stmnt_l CC 
            { 
              Object RESULT = null;
		 
         Integer[] l = (Integer[])parser.stack(-3);
         dumpln("GOTO L" + l[0]);
         dumpln("L"+l[1]+":");
      
              CUP$parser$result = new java_cup.runtime.Symbol(8/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operand ::= DOUBLE_N 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(""+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operand ::= INT_N 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(""+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operand ::= var 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*operand*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= operand 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= MINUS expr 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = "-"+x; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= RO expr RC 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DIV expr 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x+" "+y+" /"; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MUL expr 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x+" "+y+" *"; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MINUS expr 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x+" "+y+" -"; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr PLUS expr 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x+" "+y+" +"; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assign ::= var EQ error 
            { 
              Object RESULT = null;
		 pSynWarning("Error in assignment"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assign ::= var EQ expr 
            { 
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 dumpln("EVAL "+y); dumpln("ASS "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var ::= ID SO ID SC 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(x + "["+ y + "]"); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var ::= var_dec 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_dec ::= ID SO INT_N SC 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x+"["+y+"]"; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*var_dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_dec ::= ID 
            { 
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*var_dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= DOUBLE_TYPE 
            { 
              String RESULT = null;
		 RESULT = new String("DOUBLE"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT_TYPE 
            { 
              String RESULT = null;
		 RESULT = new String("INT"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_dec_l ::= var_dec 
            { 
              String RESULT = null;
		 dumpln((String)parser.stack(-1)+" "+(String)parser.stack(0)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*var_dec_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_dec_l ::= var_dec_l CM NT$0 var_dec 
            { 
              String RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 dumpln((String)parser.stack(-1)+" "+(String)parser.stack(0)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*var_dec_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            { 
              Object RESULT = null;
 RESULT = (String)parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= type error 
            { 
              Object RESULT = null;
		 pSynWarning("Error in declaration"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= type var_dec_l 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmnt ::= print error 
            { 
              Object RESULT = null;
		 pSynWarning("Missing ; before } :"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmnt ::= assign error 
            { 
              Object RESULT = null;
		 pSynWarning("Missing ; before } :"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmnt ::= print S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmnt ::= if 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmnt ::= while 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmnt ::= assign S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*stmnt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmnt_l ::= stmnt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmnt_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmnt_l ::= stmnt_l stmnt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmnt_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_l ::= decl S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*decl_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_l ::= decl_l decl S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*decl_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl_l stmnt_l 
            { 
              Object RESULT = null;
		 
      dumpln("\tEND");
      if(parser.isCorrect) System.out.println("Program correctly recognized"); 
      else System.out.println("Parsing finished with warnings"); 
      if(parser.dumpOutput!="stdout"){
         try{
            BufferedWriter out = new BufferedWriter(new FileWriter(parser.dumpOutput));
            String outText = parser.outputBuffer.toString();
            out.write(outText);
            out.close();
         } catch(IOException e){
            e.printStackTrace();
         }
      }
   
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

