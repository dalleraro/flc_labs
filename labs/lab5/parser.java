
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 28 16:56:58 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;

/** CUP v0.10k generated parser.
  * @version Wed Jun 28 16:56:58 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\003\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\007\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\007\000\002\013" +
    "\003\000\002\010\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\016\004\005\005\022\006\006\014\014\016" +
    "\016\020\004\001\002\000\016\004\005\005\025\006\026" +
    "\014\014\016\016\020\004\001\002\000\030\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\017\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\001\002\000\022\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\070\022\uffe5\024\uffe5" +
    "\001\002\000\006\022\065\024\066\001\002\000\020\007" +
    "\032\010\033\011\034\013\031\014\030\022\ufff9\024\ufff9" +
    "\001\002\000\020\010\041\011\043\012\042\013\037\014" +
    "\040\022\ufff8\024\ufff8\001\002\000\006\022\ufffb\024\ufffb" +
    "\001\002\000\006\022\ufffa\024\ufffa\001\002\000\016\004" +
    "\005\005\025\006\026\014\014\016\016\020\004\001\002" +
    "\000\004\002\063\001\002\000\016\004\005\005\025\006" +
    "\026\014\014\016\016\020\004\001\002\000\006\022\ufffd" +
    "\024\ufffd\001\002\000\006\022\ufffc\024\ufffc\001\002\000" +
    "\006\022\ufffe\024\ufffe\001\002\000\022\007\uffee\010\uffee" +
    "\011\uffee\013\uffee\014\uffee\015\023\022\uffee\024\uffee\001" +
    "\002\000\016\004\005\005\025\006\026\014\014\016\016" +
    "\020\004\001\002\000\014\010\041\011\043\012\042\013" +
    "\037\014\040\001\002\000\030\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\001\002\000\030\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\017\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\001\002\000\020\007\032\010\033\011\034" +
    "\013\031\014\030\022\uffe4\024\uffe4\001\002\000\016\004" +
    "\005\005\025\006\026\014\014\016\016\020\004\001\002" +
    "\000\016\004\005\005\025\006\026\014\014\016\016\020" +
    "\004\001\002\000\016\004\005\005\025\006\026\014\014" +
    "\016\016\020\004\001\002\000\016\004\005\005\025\006" +
    "\026\014\014\016\016\020\004\001\002\000\016\004\005" +
    "\005\025\006\026\014\014\016\016\020\004\001\002\000" +
    "\030\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\001\002\000" +
    "\030\007\032\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\001\002\000" +
    "\016\004\005\005\025\006\026\014\014\016\016\020\004" +
    "\001\002\000\016\004\005\005\025\006\026\014\014\016" +
    "\016\020\004\001\002\000\016\004\005\005\025\006\026" +
    "\014\014\016\016\020\004\001\002\000\016\004\005\005" +
    "\025\006\026\014\014\016\016\020\004\001\002\000\016" +
    "\004\005\005\025\006\026\014\014\016\016\020\004\001" +
    "\002\000\030\007\032\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\001" +
    "\002\000\030\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\001" +
    "\002\000\014\007\032\010\033\011\034\013\031\014\030" +
    "\001\002\000\030\007\032\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\001\002\000\030\007\uffec\010\041\011\043\012\042\013" +
    "\uffec\014\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\001\002\000\030\007\uffed\010\041\011\043\012\042\013" +
    "\uffed\014\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\001\002\000\030\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\001\002\000\030\007\032\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\001\002\000\030\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\001\002\000\030\007\032\010\033\011\034\012\ufff7\013" +
    "\ufff7\014\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\001\002\000\030\007\032\010\033\011\034\012\ufff6\013" +
    "\ufff6\014\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\001\002\000\016\007\032\010\033\011\034\013\031\014" +
    "\030\023\060\001\002\000\016\004\005\005\025\006\026" +
    "\014\014\016\016\020\004\001\002\000\016\007\032\010" +
    "\033\011\034\013\031\014\030\017\062\001\002\000\030" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\017" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\001\002\000\004" +
    "\002\001\001\002\000\030\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\001\002\000\016\004\005\005\022\006\006\014" +
    "\014\016\016\020\004\001\002\000\004\002\000\001\002" +
    "\000\006\022\uffff\024\uffff\001\002\000\016\004\005\005" +
    "\025\006\026\014\014\016\016\020\004\001\002\000\020" +
    "\010\041\011\043\012\042\013\037\014\040\022\uffe3\024" +
    "\uffe3\001\002\000\016\010\041\011\043\012\042\013\037" +
    "\014\040\021\075\001\002\000\016\007\032\010\033\011" +
    "\034\013\031\014\030\021\074\001\002\000\030\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\001\002\000\030\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\024\003\014\004\006\005\020\006\016\007" +
    "\017\010\011\011\012\012\007\013\010\001\001\000\006" +
    "\012\072\013\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\063\013" +
    "\023\001\001\000\002\001\001\000\006\012\056\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\026\013\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\055\013\023\001\001\000\006" +
    "\012\054\013\023\001\001\000\006\012\053\013\023\001" +
    "\001\000\006\012\052\013\051\001\001\000\006\012\035" +
    "\013\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\045\013\050\001\001\000\006\012\045\013\047" +
    "\001\001\000\006\012\046\013\023\001\001\000\006\012" +
    "\045\013\044\001\001\000\006\012\043\013\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\060" +
    "\013\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\066\006\016" +
    "\007\017\010\011\011\012\012\007\013\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\045\013\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   scalars = new HashMap<Character, Double>();
   vectors = new HashMap<Character, parser.Vector>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   
   static class Vector{
      public double e1;
      public double e2;

      public Vector(Double e1, Double e2) {
         this.e1 = e1;
         this.e2 = e2;
      }
   }
   

   public boolean error_found = false;
   public HashMap<Character, Double> scalars;
   public HashMap<Character, parser.Vector> vectors;
   
   public void report_error(String message, Object info) {
      System.err.print("ERROR: Syntax error");
      if(info instanceof Symbol)
         if(((Symbol)info).left != -1){
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            System.err.print(" (line "+line+", column "+column+"). ");
         } else System.err.print(": ");
       else System.err.print(": ");
       error_found = true;
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vector_assign ::= VVAR EQ vector_expr 
            { parser.Tree.reduce(3,"vector_assign",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector e = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
   parser.vectors.put(v, e); 
   System.out.println("assignment: "+v+"->["+e.e1+","+e.e2+"]");   

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vector_assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // scalar_assign ::= SVAR EQ scalar_expr 
            { parser.Tree.reduce(3,"scalar_assign",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
   parser.scalars.put(v, e); 
   System.out.println("assignment: "+v+"->"+e);

              CUP$parser$result = new java_cup.runtime.Symbol(6/*scalar_assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vector_expr ::= VVAR 
            { parser.Tree.reduce(1,"vector_expr",0);
              parser.Vector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vectors.get(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vector_expr ::= SO scalar_expr CM scalar_expr SC 
            { parser.Tree.reduce(5,"vector_expr",0);
              parser.Vector RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new parser.Vector(x, y); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vector_expr ::= RO vector_expr RC 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parser.Vector e = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vector_expr ::= scalar_expr DIV vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector y = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new parser.Vector(x/y.e1, x/y.e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vector_expr ::= vector_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parser.Vector x = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new parser.Vector(x.e1/y, x.e2/y); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vector_expr ::= vector_expr MUL scalar_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parser.Vector y = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new parser.Vector(x*y.e1, x*y.e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vector_expr ::= scalar_expr MUL vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector y = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new parser.Vector(x*y.e1, x*y.e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vector_expr ::= vector_expr SUB vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parser.Vector x = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector y = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new parser.Vector(x.e1-y.e1, x.e2-y.e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vector_expr ::= vector_expr SUM vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              parser.Vector RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parser.Vector x = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector y = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new parser.Vector(x.e1+y.e1, x.e2+y.e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*vector_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scalar_expr ::= SVAR 
            { parser.Tree.reduce(1,"scalar_expr",0);
              Double RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character v = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.scalars.get(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scalar_expr ::= NUM 
            { parser.Tree.reduce(1,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scalar_expr ::= SUB scalar_expr 
            { parser.Tree.reduce(2,"scalar_expr",0);
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -e; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scalar_expr ::= RO scalar_expr RC 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // scalar_expr ::= vector_expr PROD vector_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parser.Vector x = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector y = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x.e1*y.e1 + x.e2*y.e2; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scalar_expr ::= scalar_expr POW scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Math.pow(x, y); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // scalar_expr ::= scalar_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x / y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // scalar_expr ::= scalar_expr MUL scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x * y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scalar_expr ::= scalar_expr SUB scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x - y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scalar_expr ::= scalar_expr SUM scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x + y; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*scalar_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vector_expr_p ::= vector_expr 
            { parser.Tree.reduce(1,"vector_expr_p",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		parser.Vector e = (parser.Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
         System.out.println("vector expression: ["+e.e1+", "+e.e2+"]");

              CUP$parser$result = new java_cup.runtime.Symbol(5/*vector_expr_p*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scalar_expr_p ::= scalar_expr 
            { parser.Tree.reduce(1,"scalar_expr_p",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
         System.out.println("scalar expression: " + e);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*scalar_expr_p*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= vector_assign 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= scalar_assign 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= vector_expr_p 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= scalar_expr_p 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr 
            { parser.Tree.reduce(1,"expr_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list SEM expr 
            { parser.Tree.reduce(3,"expr_list",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // session ::= expr_list END 
            { parser.Tree.reduce(2,"session",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*session*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= session EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

