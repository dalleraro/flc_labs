
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jun 23 11:44:57 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Jun 23 11:44:57 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\004\003\000\002\004\004\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\004\000\002\011\005\000\002\012\003\000\002\012" +
    "\005\000\002\005\004\000\002\010\004\000\002\013\003" +
    "\000\002\013\005\000\002\014\004\000\002\015\003\000" +
    "\002\015\005\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\006\006\004\012\010\001\002\000\004\012" +
    "\010\001\002\000\004\012\010\001\002\000\006\012\010" +
    "\013\042\001\002\000\004\002\036\001\002\000\014\004" +
    "\uffef\005\uffef\007\uffef\010\035\011\uffef\001\002\000\006" +
    "\006\004\012\010\001\002\000\010\002\ufff8\006\ufff8\012" +
    "\010\001\002\000\010\002\ufff6\006\ufff6\012\ufff6\001\002" +
    "\000\006\006\004\012\010\001\002\000\006\004\020\005" +
    "\017\001\002\000\010\002\ufffa\006\ufffa\012\ufffa\001\002" +
    "\000\010\002\ufff0\006\ufff0\012\ufff0\001\002\000\010\002" +
    "\ufff1\006\ufff1\012\ufff1\001\002\000\006\002\ufff7\012\010" +
    "\001\002\000\004\006\004\001\002\000\010\002\ufff9\006" +
    "\ufff9\012\ufff9\001\002\000\004\002\000\001\002\000\004" +
    "\005\017\001\002\000\004\002\uffff\001\002\000\010\002" +
    "\ufff5\006\ufff5\012\ufff5\001\002\000\004\012\010\001\002" +
    "\000\004\004\020\001\002\000\006\006\004\012\010\001" +
    "\002\000\004\002\ufffe\001\002\000\006\002\ufffd\012\010" +
    "\001\002\000\006\012\uffed\013\uffed\001\002\000\004\002" +
    "\001\001\002\000\006\007\uffea\011\uffea\001\002\000\006" +
    "\007\uffec\011\uffec\001\002\000\006\007\043\011\044\001" +
    "\002\000\006\007\uffe9\011\uffe9\001\002\000\006\012\010" +
    "\013\042\001\002\000\012\004\uffee\005\uffee\007\uffee\011" +
    "\uffee\001\002\000\006\007\uffeb\011\uffeb\001\002\000\004" +
    "\012\010\001\002\000\006\002\ufff7\012\010\001\002\000" +
    "\004\002\ufffb\001\002\000\006\002\ufffc\012\010\001\002" +
    "\000\006\004\ufff3\007\ufff3\001\002\000\006\004\055\007" +
    "\054\001\002\000\004\012\010\001\002\000\006\002\ufff4" +
    "\012\ufff4\001\002\000\006\004\ufff2\007\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\024\003\006\004\013\005\015\006\010\007" +
    "\011\010\012\011\004\013\014\014\005\001\001\000\010" +
    "\012\052\013\051\014\005\001\001\000\020\004\046\005" +
    "\015\006\045\007\011\010\012\013\014\014\005\001\001" +
    "\000\012\013\036\014\005\015\040\016\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\031\005\015" +
    "\011\027\013\030\014\005\001\001\000\010\010\026\013" +
    "\024\014\005\001\001\000\002\001\001\000\020\005\022" +
    "\006\021\007\011\010\012\011\020\013\014\014\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\025\007\011\010\012\013" +
    "\024\014\005\001\001\000\004\011\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\033\005\015\013\030" +
    "\014\005\001\001\000\002\001\001\000\012\005\022\011" +
    "\032\013\030\014\005\001\001\000\002\001\001\000\010" +
    "\005\022\013\030\014\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\036\014\005\016" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\050\005\015\013\030\014\005\001\001\000\016\005" +
    "\022\006\047\007\011\010\012\013\014\014\005\001\001" +
    "\000\002\001\001\000\010\005\022\013\030\014\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\055" +
    "\014\005\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   public static void main(String args[]){
      try {
         scanner s = new scanner(new FileReader(args[0]));
         parser p = new parser(s);
         Object result = p.parse().value;
      } catch (Exception e){
         e.printStackTrace();
      }
   }

   public void report_error(String message, Object info) {
      System.err.print("ERROR: Syntax error");
      if(info instanceof Symbol)
         if(((Symbol)info).left != -1){
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            System.err.print(" (linea "+line+", colonna "+column+" ): "+message);
         } else System.err.print(": "+message);
      else System.err.print(": "+message);
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arg ::= VARIABLE 
            { parser.Tree.reduce(1,"arg",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg ::= predicate 
            { parser.Tree.reduce(1,"arg",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // al ::= al CM arg 
            { parser.Tree.reduce(3,"al",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*al*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // al ::= arg 
            { parser.Tree.reduce(1,"al",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*al*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functor ::= ATOM RO 
            { parser.Tree.reduce(2,"functor",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*functor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // predicate ::= functor al RC 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // predicate ::= ATOM 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rule ::= predicate REND 
            { parser.Tree.reduce(2,"rule",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fact ::= predicate DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pl ::= pl CM predicate 
            { parser.Tree.reduce(3,"pl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*pl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pl ::= predicate 
            { parser.Tree.reduce(1,"pl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*pl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inter ::= ISTR pl DOT 
            { parser.Tree.reduce(3,"inter",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*inter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rl ::= rl rule 
            { parser.Tree.reduce(2,"rl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*rl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rl ::= rule 
            { parser.Tree.reduce(1,"rl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*rl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // erl ::= 
            { parser.Tree.reduce(0,"erl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*erl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // erl ::= rl 
            { parser.Tree.reduce(1,"erl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*erl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fl ::= fl fact 
            { parser.Tree.reduce(2,"fl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*fl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fl ::= fact 
            { parser.Tree.reduce(1,"fl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*fl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prog ::= inter fl erl 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prog ::= inter erl fl 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= erl inter fl 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= erl fl inter 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= fl inter erl 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= fl erl inter 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

