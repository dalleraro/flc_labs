import java_cup.runtime.*;
import java.io.*;

parser code {:
   
   public static boolean fact_found = false;
   public static boolean error_found = false;

   public static void main(String args[]){
      try {
         scanner s = new scanner(new FileReader(args[0]));
         parser p = new parser(s);
         Object result = p.parse().value;
      } catch (Exception e){
         e.printStackTrace();
      }
   }

   public void report_error(String message, Object info) {
      System.err.print("ERROR: Syntax error");
      if(info instanceof Symbol)
         if(((Symbol)info).left != -1){
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            System.err.print(" (linea "+line+", colonna "+column+" ): "+message);
         } else System.err.print(": "+message);
      else System.err.print(": "+message);
   }

   public void syntax_error(Symbol cur_token){}

   public Symbol getToken() {
      return ((Symbol)stack.elementAt(tos));
   }

:};

// Terminal tokens
terminal DOT, REND, ISTR, CM, RO, RC, ATOM, VARIABLE;

// Non terimnal tokens
non terminal prog, elems, elem, fact, rule, inter, pl, predicate, functor, al, arg;

start with prog;

prog        ::=   elems inter elems {:
               if(!parser.fact_found || parser.error_found)
                  return null;
               System.out.println("Program correctly recognized");
            :};
elems       ::=   elems elem |;
elem        ::=   fact | rule;
inter       ::=   ISTR pl DOT |
                  ISTR error DOT {:
               parser.report_error("Error in interrogation\n", parser.getToken());
               parser.error_found = true;
            :};
pl          ::=   predicate | pl CM predicate;
fact        ::=   predicate DOT {:
               parser.fact_found = true;
            :}    | error DOT {:
               parser.report_error("Error in fact\n", parser.getToken());
               parser.error_found = true;
            :};
rule        ::=   predicate REND pl DOT |
                  error REND pl DOT {: 
               parser.report_error("Error in rule\n", parser.getToken());
               parser.error_found = true;
            :};
predicate   ::=   ATOM | functor al RC;
functor     ::=   ATOM RO;
al          ::=   arg | al CM arg;
arg         ::=   predicate | VARIABLE;

