
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 27 12:18:47 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Jun 27 12:18:47 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\010\005\000\002\010\005\000\002\011\003\000" +
    "\002\011\005\000\002\006\004\000\002\006\004\000\002" +
    "\007\006\000\002\007\006\000\002\012\003\000\002\012" +
    "\005\000\002\013\004\000\002\014\003\000\002\014\005" +
    "\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\010\003\ufffe\006\ufffe\012\ufffe\001\002\000" +
    "\010\003\014\006\007\012\013\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\006\003\044\012" +
    "\013\001\002\000\012\002\uffff\003\uffff\006\uffff\012\uffff" +
    "\001\002\000\010\002\ufffe\003\ufffe\012\ufffe\001\002\000" +
    "\006\012\013\013\037\001\002\000\014\004\ufff3\005\ufff3" +
    "\007\ufff3\010\033\011\ufff3\001\002\000\006\004\030\005" +
    "\027\001\002\000\012\002\ufffc\003\ufffc\006\ufffc\012\ufffc" +
    "\001\002\000\006\004\021\005\020\001\002\000\012\002" +
    "\ufffd\003\ufffd\006\ufffd\012\ufffd\001\002\000\004\012\013" +
    "\001\002\000\012\002\ufff7\003\ufff7\006\ufff7\012\ufff7\001" +
    "\002\000\006\004\ufff9\007\ufff9\001\002\000\006\004\025" +
    "\007\024\001\002\000\004\012\013\001\002\000\012\002" +
    "\ufff5\003\ufff5\006\ufff5\012\ufff5\001\002\000\006\004\ufff8" +
    "\007\ufff8\001\002\000\004\012\013\001\002\000\012\002" +
    "\ufff6\003\ufff6\006\ufff6\012\ufff6\001\002\000\006\004\032" +
    "\007\024\001\002\000\012\002\ufff4\003\ufff4\006\ufff4\012" +
    "\ufff4\001\002\000\006\012\ufff1\013\ufff1\001\002\000\006" +
    "\007\ufff0\011\ufff0\001\002\000\006\007\uffee\011\uffee\001" +
    "\002\000\006\007\040\011\041\001\002\000\006\007\uffed" +
    "\011\uffed\001\002\000\006\012\013\013\037\001\002\000" +
    "\012\004\ufff2\005\ufff2\007\ufff2\011\ufff2\001\002\000\006" +
    "\007\uffef\011\uffef\001\002\000\010\002\000\003\014\012" +
    "\013\001\002\000\004\004\047\001\002\000\006\004\046" +
    "\007\024\001\002\000\010\002\ufffb\003\ufffb\012\ufffb\001" +
    "\002\000\010\002\ufffa\003\ufffa\012\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\006\003\004\004\003\001\001\000\016\005" +
    "\007\006\016\007\014\010\010\012\015\013\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\044\012" +
    "\021\013\011\001\001\000\002\001\001\000\004\004\042" +
    "\001\001\000\012\012\034\013\011\014\035\015\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\022\012" +
    "\021\013\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\025\013\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\030\012\021" +
    "\013\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\034\013\011\015\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\007\006\016\007\014\012\015\013" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   
   public static boolean fact_found = false;
   public static boolean error_found = false;

   public static void main(String args[]){
      try {
         scanner s = new scanner(new FileReader(args[0]));
         parser p = new parser(s);
         Object result = p.parse().value;
      } catch (Exception e){
         e.printStackTrace();
      }
   }

   public void report_error(String message, Object info) {
      System.err.print("ERROR: Syntax error");
      if(info instanceof Symbol)
         if(((Symbol)info).left != -1){
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            System.err.print(" (linea "+line+", colonna "+column+" ): "+message);
         } else System.err.print(": "+message);
      else System.err.print(": "+message);
   }

   public void syntax_error(Symbol cur_token){}

   public Symbol getToken() {
      return ((Symbol)stack.elementAt(tos));
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arg ::= VARIABLE 
            { parser.Tree.reduce(1,"arg",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arg ::= predicate 
            { parser.Tree.reduce(1,"arg",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // al ::= al CM arg 
            { parser.Tree.reduce(3,"al",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*al*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // al ::= arg 
            { parser.Tree.reduce(1,"al",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*al*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functor ::= ATOM RO 
            { parser.Tree.reduce(2,"functor",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*functor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate ::= functor al RC 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicate ::= ATOM 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rule ::= error REND pl DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;
		 
               parser.report_error("Error in rule\n", parser.getToken());
               parser.error_found = true;
            
              CUP$parser$result = new java_cup.runtime.Symbol(5/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rule ::= predicate REND pl DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fact ::= error DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;
		
               parser.report_error("Error in fact\n", parser.getToken());
               parser.error_found = true;
            
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fact ::= predicate DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;
		
               parser.fact_found = true;
            
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pl ::= pl CM predicate 
            { parser.Tree.reduce(3,"pl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*pl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pl ::= predicate 
            { parser.Tree.reduce(1,"pl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*pl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inter ::= ISTR error DOT 
            { parser.Tree.reduce(3,"inter",0);
              Object RESULT = null;
		
               parser.report_error("Error in interrogation\n", parser.getToken());
               parser.error_found = true;
            
              CUP$parser$result = new java_cup.runtime.Symbol(6/*inter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inter ::= ISTR pl DOT 
            { parser.Tree.reduce(3,"inter",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*inter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elem ::= rule 
            { parser.Tree.reduce(1,"elem",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elem ::= fact 
            { parser.Tree.reduce(1,"elem",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elems ::= 
            { parser.Tree.reduce(0,"elems",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*elems*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elems ::= elems elem 
            { parser.Tree.reduce(2,"elems",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*elems*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= elems inter elems 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;
		
               if(!parser.fact_found || parser.error_found)
                  return null;
               System.out.println("Program correctly recognized");
            
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

