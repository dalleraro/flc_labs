/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\100\1\102\1\102\1\77\22\0\1\74\2\0\1\35"+
    "\1\17\3\0\1\30\1\31\1\21\1\20\1\24\1\26\1\0\1\7"+
    "\1\1\1\2\1\5\1\12\1\15\1\14\1\11\1\6\1\13\1\10"+
    "\1\16\1\23\1\0\1\25\1\0\1\34\1\0\1\52\1\22\1\36"+
    "\1\54\1\46\1\41\1\43\1\53\1\42\2\22\1\76\1\50\1\40"+
    "\1\37\1\51\1\75\1\45\1\70\1\47\1\44\1\71\2\22\1\55"+
    "\1\22\3\0\1\27\1\22\1\0\1\63\2\22\1\67\1\57\1\22"+
    "\1\73\1\65\1\66\3\22\1\60\2\22\1\61\1\22\1\62\1\22"+
    "\1\56\1\64\1\72\1\22\1\3\1\4\1\22\1\32\1\0\1\33"+
    "\7\0\1\102\u1fa2\0\1\102\1\102\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\12\3\2\21\4\2\3\0\2\20"+
    "\1\0\3\3\1\22\10\3\2\2\1\0\2\2\1\0"+
    "\1\20\1\23\2\3\1\0\2\3\1\24\4\3\2\0"+
    "\1\2\1\0\1\3\1\25\1\0\6\3\4\0\1\20"+
    "\1\3\1\0\1\26\4\3\1\27\4\0\1\3\1\0"+
    "\4\3\7\0\1\3\1\0\4\3\10\0\1\3\1\30"+
    "\1\3\1\31\1\3\12\0\1\32\2\3\2\0\1\33"+
    "\2\3\34\0\1\33\1\34\1\0\2\34\1\0\1\34"+
    "\12\0\1\34\1\0\3\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\103"+
    "\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\311\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0797\0\u0c90"+
    "\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\311\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\311\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\311\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\311\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u1c87\0\u1cca\0\u1d0d\0\103\0\u1d50\0\311\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\311\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3"+
    "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\103\0\u299d\0\u29e0"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8"+
    "\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2dcd"+
    "\0\u2e10\0\103\0\u2e53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\6\7"+
    "\2\2\1\11\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\3\5\1\27\3\5\1\30\1\31\2\5\1\32\1\33"+
    "\2\5\1\34\4\5\1\35\1\5\1\36\2\5\1\37"+
    "\3\5\1\40\2\5\1\41\2\40\105\0\2\7\2\0"+
    "\1\7\1\42\1\0\1\42\1\43\1\7\1\43\1\44"+
    "\1\7\66\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\36\5\1\0\2\5\5\0\1\45\1\42\2\0\1\43"+
    "\1\42\1\0\1\42\1\43\1\42\1\43\1\42\1\43"+
    "\66\0\1\43\1\42\2\0\1\43\1\42\1\0\1\42"+
    "\1\43\1\42\1\43\1\42\1\43\106\0\1\46\62\0"+
    "\1\47\1\50\1\51\1\52\133\0\1\53\46\0\6\5"+
    "\1\0\6\5\4\0\1\5\13\0\1\5\1\54\12\5"+
    "\1\55\21\5\1\0\2\5\5\0\6\5\1\0\6\5"+
    "\4\0\1\5\13\0\2\5\1\56\27\5\1\57\3\5"+
    "\1\0\2\5\5\0\6\5\1\0\6\5\4\0\1\5"+
    "\13\0\36\5\1\0\1\60\1\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\10\5\1\61\25\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\33\5\1\62\2\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\6\5\1\63\27\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\21\5\1\64\14\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\34\5\1\65\1\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\26\5\1\66\7\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\11\5\1\67\24\5\1\0"+
    "\2\5\104\0\1\40\3\0\1\70\1\71\2\0\1\70"+
    "\1\71\1\72\1\71\1\70\1\71\1\70\1\71\1\70"+
    "\1\0\2\72\63\0\1\70\1\71\2\0\1\70\1\71"+
    "\1\0\1\71\1\70\1\71\1\70\1\71\1\70\66\0"+
    "\1\43\1\42\2\0\1\43\1\73\1\72\1\71\1\43"+
    "\1\42\1\70\1\42\1\43\1\0\2\72\63\0\1\70"+
    "\1\74\2\0\1\70\1\71\1\0\1\71\1\70\1\71"+
    "\1\70\1\71\1\70\65\0\21\46\1\75\61\46\1\0"+
    "\1\47\1\50\101\0\1\50\1\76\104\0\1\52\101\0"+
    "\1\51\134\0\1\77\46\0\6\5\1\0\6\5\4\0"+
    "\1\5\13\0\2\5\1\100\33\5\1\0\2\5\5\0"+
    "\6\5\1\0\6\5\4\0\1\5\13\0\32\5\1\101"+
    "\3\5\1\0\2\5\5\0\6\5\1\0\6\5\4\0"+
    "\1\5\13\0\36\5\1\102\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\6\5\1\103\27\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\12\5\1\104\23\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\5\5\1\105\30\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\12\5\1\106\23\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\22\5\1\107\13\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\35\5\1\105\1\0\2\5\5\0\6\5\1\0\6\5"+
    "\4\0\1\5\13\0\22\5\1\110\13\5\1\0\2\5"+
    "\5\0\6\5\1\0\6\5\4\0\1\5\13\0\1\5"+
    "\1\111\34\5\1\0\2\5\5\0\2\70\2\0\2\70"+
    "\1\0\6\70\66\0\2\70\2\0\2\70\1\72\6\70"+
    "\1\0\2\72\64\0\1\112\2\0\2\113\1\0\6\113"+
    "\66\0\1\70\1\71\2\0\2\70\1\72\2\70\1\71"+
    "\3\70\1\0\2\72\63\0\2\70\2\0\1\70\1\114"+
    "\1\72\6\70\1\0\2\72\62\0\7\46\1\40\11\46"+
    "\1\75\61\46\1\0\1\76\1\115\101\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\3\5\1\116\32\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\10\5\1\117\25\5\1\0\2\5\51\0\1\120\36\0"+
    "\6\5\1\0\6\5\4\0\1\5\13\0\14\5\1\121"+
    "\21\5\1\0\2\5\5\0\6\5\1\0\6\5\4\0"+
    "\1\5\13\0\13\5\1\122\22\5\1\0\2\5\5\0"+
    "\6\5\1\0\6\5\4\0\1\5\13\0\4\5\1\123"+
    "\31\5\1\0\2\5\5\0\6\5\1\0\6\5\4\0"+
    "\1\5\13\0\23\5\1\124\12\5\1\0\2\5\5\0"+
    "\6\5\1\0\6\5\4\0\1\5\13\0\30\5\1\125"+
    "\5\5\1\0\2\5\5\0\6\5\1\0\6\5\4\0"+
    "\1\5\13\0\7\5\1\126\26\5\1\0\2\5\5\0"+
    "\2\113\2\0\1\113\1\127\1\0\1\127\1\130\1\113"+
    "\1\130\1\131\1\113\66\0\1\130\1\127\2\0\1\130"+
    "\1\127\1\0\1\127\1\130\1\127\1\130\1\127\1\130"+
    "\66\0\2\70\2\0\2\70\1\132\6\70\66\0\1\115"+
    "\1\133\101\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\4\5\1\134\31\5\1\0\2\5\56\0\1\135\31\0"+
    "\6\5\1\0\6\5\4\0\1\5\13\0\36\5\1\0"+
    "\1\5\1\136\5\0\6\5\1\0\6\5\4\0\1\5"+
    "\13\0\10\5\1\137\25\5\1\0\2\5\5\0\6\5"+
    "\1\0\6\5\4\0\1\5\13\0\16\5\1\140\17\5"+
    "\1\0\2\5\5\0\6\5\1\0\6\5\4\0\1\5"+
    "\13\0\21\5\1\141\14\5\1\0\2\5\5\0\6\5"+
    "\1\0\6\5\4\0\1\5\13\0\31\5\1\142\4\5"+
    "\1\0\2\5\5\0\6\5\1\0\6\5\4\0\1\5"+
    "\13\0\10\5\1\143\25\5\1\0\2\5\6\0\1\144"+
    "\3\0\1\144\1\145\1\144\1\0\1\144\1\0\1\144"+
    "\2\0\2\145\64\0\1\144\3\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\67\0\1\130\1\127\2\0"+
    "\1\130\1\146\1\145\1\144\1\130\1\127\1\0\1\127"+
    "\1\130\1\0\2\145\63\0\1\147\102\0\1\133\102\0"+
    "\6\5\1\0\6\5\4\0\1\5\13\0\5\5\1\150"+
    "\30\5\1\0\2\5\44\0\1\151\43\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\7\5\1\152\26\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\4\5\1\153\31\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\24\5\1\154\11\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\30\5\1\155\5\5\1\0\2\5\13\0\1\145\7\0"+
    "\2\145\64\0\1\156\2\0\2\157\1\0\6\157\67\0"+
    "\1\144\4\0\1\145\2\0\1\144\4\0\2\145\64\0"+
    "\1\160\2\0\1\161\1\162\2\0\1\163\1\164\1\0"+
    "\1\164\1\163\66\0\6\5\1\0\6\5\4\0\1\5"+
    "\13\0\6\5\1\165\27\5\1\0\2\5\47\0\1\166"+
    "\40\0\6\5\1\0\6\5\4\0\1\5\13\0\14\5"+
    "\1\167\21\5\1\0\2\5\5\0\6\5\1\0\6\5"+
    "\4\0\1\5\13\0\11\5\1\170\24\5\1\0\2\5"+
    "\5\0\6\5\1\0\6\5\4\0\1\5\13\0\25\5"+
    "\1\171\10\5\1\0\2\5\5\0\6\5\1\0\6\5"+
    "\4\0\1\5\13\0\20\5\1\172\15\5\1\0\2\5"+
    "\5\0\2\157\2\0\1\157\1\173\1\0\1\173\1\174"+
    "\1\157\1\174\1\175\1\157\66\0\1\174\1\173\2\0"+
    "\1\174\1\173\1\0\1\173\1\174\1\173\1\174\1\173"+
    "\1\174\74\0\1\176\102\0\1\177\102\0\1\200\102\0"+
    "\1\201\102\0\1\202\74\0\6\5\1\0\6\5\4\0"+
    "\1\5\13\0\7\5\1\203\26\5\1\0\2\5\52\0"+
    "\1\204\35\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\11\5\1\205\24\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\17\5\1\206\16\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\20\5\1\207\15\5\1\0\2\5\5\0\3\5\1\206"+
    "\2\5\1\0\6\5\4\0\1\5\13\0\36\5\1\0"+
    "\2\5\6\0\1\210\3\0\1\210\1\211\1\210\1\0"+
    "\1\210\1\0\1\210\2\0\2\211\64\0\1\210\3\0"+
    "\1\210\1\0\1\210\1\0\1\210\1\0\1\210\67\0"+
    "\1\174\1\173\2\0\1\174\1\212\1\211\1\210\1\174"+
    "\1\173\1\0\1\173\1\174\1\0\2\211\64\0\1\213"+
    "\2\0\1\214\4\0\1\215\71\0\1\216\1\214\2\0"+
    "\1\217\76\0\1\220\102\0\1\216\1\214\2\0\1\214"+
    "\4\0\1\221\71\0\1\216\1\214\2\0\1\214\4\0"+
    "\1\215\71\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\10\5\1\222\25\5\1\0\2\5\5\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\6\5\1\223\27\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\26\5\1\224\7\5\1\0\2\5\13\0\1\211\7\0"+
    "\2\211\64\0\1\225\2\0\2\226\1\0\6\226\67\0"+
    "\1\210\4\0\1\211\2\0\1\210\4\0\2\211\72\0"+
    "\1\227\2\0\1\227\70\0\2\227\2\0\2\227\1\0"+
    "\6\227\66\0\2\227\102\0\1\227\2\0\2\227\1\0"+
    "\6\227\66\0\2\227\2\0\2\227\2\0\5\227\67\0"+
    "\1\227\2\0\1\227\76\0\1\227\102\0\6\5\1\0"+
    "\6\5\4\0\1\5\13\0\7\5\1\230\26\5\1\0"+
    "\2\5\5\0\6\5\1\0\6\5\4\0\1\5\13\0"+
    "\24\5\1\231\11\5\1\0\2\5\5\0\2\226\2\0"+
    "\1\226\1\232\1\0\1\232\1\233\1\226\1\233\1\234"+
    "\1\226\66\0\1\233\1\232\2\0\1\233\1\232\1\0"+
    "\1\232\1\233\1\232\1\233\1\232\1\233\103\0\1\235"+
    "\65\0\6\5\1\0\6\5\4\0\1\5\13\0\10\5"+
    "\1\206\25\5\1\0\2\5\5\0\6\5\1\0\6\5"+
    "\4\0\1\5\13\0\21\5\1\206\14\5\1\0\2\5"+
    "\6\0\1\236\3\0\1\236\1\237\1\236\1\0\1\236"+
    "\1\0\1\236\2\0\2\237\64\0\1\236\3\0\1\236"+
    "\1\0\1\236\1\0\1\236\1\0\1\236\67\0\1\233"+
    "\1\232\2\0\1\233\1\240\1\237\1\236\1\233\1\232"+
    "\1\0\1\232\1\233\1\0\2\237\63\0\1\241\1\242"+
    "\107\0\1\237\7\0\2\237\64\0\1\243\2\0\2\244"+
    "\1\0\6\244\67\0\1\236\4\0\1\237\2\0\1\236"+
    "\4\0\2\237\64\0\1\245\2\0\2\246\1\0\6\246"+
    "\66\0\1\246\1\247\101\0\2\244\2\0\1\244\1\250"+
    "\1\0\1\250\1\251\1\244\1\251\1\252\1\244\66\0"+
    "\1\251\1\250\2\0\1\251\1\250\1\0\1\250\1\251"+
    "\1\250\1\251\1\250\1\251\103\0\1\253\102\0\1\254"+
    "\102\0\1\255\66\0\1\256\3\0\1\256\1\257\1\256"+
    "\1\0\1\256\1\0\1\256\2\0\2\257\64\0\1\256"+
    "\3\0\1\256\1\0\1\256\1\0\1\256\1\0\1\256"+
    "\67\0\1\251\1\250\2\0\1\251\1\260\1\257\1\256"+
    "\1\251\1\250\1\0\1\250\1\251\1\0\2\257\64\0"+
    "\1\261\2\0\1\262\4\0\1\262\1\0\2\262\66\0"+
    "\2\262\2\0\1\262\4\0\1\262\1\0\2\262\66\0"+
    "\2\262\2\0\1\262\4\0\1\263\77\0\1\257\7\0"+
    "\2\257\64\0\1\264\2\0\2\265\1\0\6\265\67\0"+
    "\1\256\4\0\1\257\2\0\1\256\4\0\2\257\67\0"+
    "\2\266\1\0\6\266\66\0\2\266\2\0\2\266\1\0"+
    "\6\266\66\0\2\266\2\0\2\266\2\0\2\266\1\0"+
    "\2\266\66\0\2\265\2\0\1\265\1\267\1\0\1\267"+
    "\1\270\1\265\1\270\1\271\1\265\66\0\1\270\1\267"+
    "\2\0\1\270\1\267\1\0\1\267\1\270\1\267\1\270"+
    "\1\267\1\270\67\0\1\272\3\0\1\272\1\273\1\272"+
    "\1\0\1\272\1\0\1\272\2\0\2\273\64\0\1\272"+
    "\3\0\1\272\1\0\1\272\1\0\1\272\1\0\1\272"+
    "\67\0\1\270\1\267\2\0\1\270\1\274\1\273\1\272"+
    "\1\270\1\267\1\0\1\267\1\270\1\0\2\273\71\0"+
    "\1\273\7\0\2\273\64\0\1\275\2\0\2\276\1\0"+
    "\6\276\67\0\1\272\4\0\1\273\2\0\1\272\4\0"+
    "\2\273\63\0\2\276\2\0\1\276\1\277\1\0\1\277"+
    "\1\300\1\276\1\300\1\301\1\276\66\0\1\300\1\277"+
    "\2\0\1\300\1\277\1\0\1\277\1\300\1\277\1\300"+
    "\1\277\1\300\67\0\1\302\3\0\1\302\1\303\1\302"+
    "\1\0\1\302\1\0\1\302\2\0\2\303\64\0\1\302"+
    "\3\0\1\302\1\0\1\302\1\0\1\302\1\0\1\302"+
    "\67\0\1\300\1\277\2\0\1\300\1\304\1\303\1\302"+
    "\1\300\1\277\1\0\1\277\1\300\1\0\2\303\71\0"+
    "\1\303\7\0\2\303\64\0\1\305\2\0\2\306\1\0"+
    "\6\306\67\0\1\302\4\0\1\303\2\0\1\302\4\0"+
    "\2\303\63\0\2\306\2\0\1\306\1\307\1\0\1\307"+
    "\1\310\1\306\1\310\1\311\1\306\66\0\1\310\1\307"+
    "\2\0\1\310\1\307\1\0\1\307\1\310\1\307\1\310"+
    "\1\307\1\310\67\0\1\312\3\0\1\312\1\0\1\312"+
    "\1\0\1\312\1\0\1\312\67\0\1\310\1\307\2\0"+
    "\1\310\1\313\1\0\1\312\1\310\1\307\1\0\1\307"+
    "\1\310\67\0\1\312\7\0\1\312\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11926];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\13\11\14\1\1\11\5\1\3\0"+
    "\2\1\1\0\16\1\1\0\2\1\1\0\4\1\1\0"+
    "\7\1\2\0\1\1\1\0\2\1\1\0\6\1\4\0"+
    "\2\1\1\0\6\1\4\0\1\1\1\0\4\1\7\0"+
    "\1\1\1\0\4\1\10\0\1\1\1\11\3\1\12\0"+
    "\3\1\2\0\3\1\34\0\1\11\1\1\1\0\2\1"+
    "\1\0\1\1\12\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol sym(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    private Symbol sym(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Scanner Error: " + yytext());
            }
          case 29: break;
          case 2: 
            { return sym(sym.INT, Integer.parseInt(yytext()));
            }
          case 30: break;
          case 3: 
            { return sym(sym.VAR, yytext());
            }
          case 31: break;
          case 4: 
            { return sym(sym.DIV);
            }
          case 32: break;
          case 5: 
            { return sym(sym.PLUS);
            }
          case 33: break;
          case 6: 
            { return sym(sym.STAR);
            }
          case 34: break;
          case 7: 
            { return sym(sym.S);
            }
          case 35: break;
          case 8: 
            { return sym(sym.CM);
            }
          case 36: break;
          case 9: 
            { return sym(sym.EQ);
            }
          case 37: break;
          case 10: 
            { return sym(sym.MINUS);
            }
          case 38: break;
          case 11: 
            { return sym(sym.POW);
            }
          case 39: break;
          case 12: 
            { return sym(sym.RO);
            }
          case 40: break;
          case 13: 
            { return sym(sym.RC);
            }
          case 41: break;
          case 14: 
            { return sym(sym.CO);
            }
          case 42: break;
          case 15: 
            { return sym(sym.CC);
            }
          case 43: break;
          case 16: 
            { return sym(sym.TOKEN1);
            }
          case 44: break;
          case 17: 
            { ;
            }
          case 45: break;
          case 18: 
            { return sym(sym.IS);
            }
          case 46: break;
          case 19: 
            { return sym(sym.SEP);
            }
          case 47: break;
          case 20: 
            { return sym(sym.AVG);
            }
          case 48: break;
          case 21: 
            { return sym(sym.CASE);
            }
          case 49: break;
          case 22: 
            { return sym(sym.EQUAL);
            }
          case 50: break;
          case 23: 
            { return sym(sym.STORE);
            }
          case 51: break;
          case 24: 
            { return sym(sym.RANGE);
            }
          case 52: break;
          case 25: 
            { return sym(sym.ENTITY, yytext().toLowerCase());
            }
          case 53: break;
          case 26: 
            { return sym(sym.CONF);
            }
          case 54: break;
          case 27: 
            { return sym(sym.TOKEN2);
            }
          case 55: break;
          case 28: 
            { return sym(sym.TOKEN3);
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
