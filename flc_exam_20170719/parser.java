
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jul 19 15:00:43 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Wed Jul 19 15:00:43 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\004\006\000\002\005\005\000\002\005\005" +
    "\000\002\006\005\000\002\006\003\000\002\006\004\000" +
    "\002\010\005\000\002\007\003\000\002\007\003\000\002" +
    "\011\004\000\002\011\002\000\002\012\003\000\002\012" +
    "\003\000\002\013\004\000\002\014\004\000\002\015\004" +
    "\000\002\016\004\000\002\017\010\000\002\017\006\000" +
    "\002\043\002\000\002\020\005\000\002\020\002\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\023" +
    "\005\000\002\023\003\000\002\024\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\004\000\002" +
    "\034\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\006\000\002\042\005\000\002\042\003" +
    "\000\002\042\002\000\002\025\012\000\002\037\002\000" +
    "\002\044\002\000\002\026\005\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\012\000\002\040" +
    "\002\000\002\031\010\000\002\041\002\000\002\045\002" +
    "\000\002\032\005\000\002\032\002\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\006\005\011\007\005\001\002\000\010\005" +
    "\ufff4\006\ufff4\007\ufff4\001\002\000\004\010\161\001\002" +
    "\000\010\005\011\006\142\007\005\001\002\000\004\002" +
    "\141\001\002\000\004\005\011\001\002\000\004\010\136" +
    "\001\002\000\004\004\013\001\002\000\004\024\016\001" +
    "\002\000\010\002\uffe9\025\uffe9\027\uffe9\001\002\000\004" +
    "\002\000\001\002\000\004\033\017\001\002\000\004\035" +
    "\020\001\002\000\006\010\021\033\022\001\002\000\010" +
    "\002\uffec\025\uffec\027\uffec\001\002\000\004\035\023\001" +
    "\002\000\004\010\024\001\002\000\010\002\uffed\025\uffed" +
    "\027\uffed\001\002\000\010\002\uffee\025\uffeb\027\uffeb\001" +
    "\002\000\006\025\030\027\033\001\002\000\010\002\uffe8" +
    "\025\uffe8\027\uffe8\001\002\000\004\034\126\001\002\000" +
    "\010\002\uffe7\025\uffe7\027\uffe7\001\002\000\010\002\uffea" +
    "\025\uffea\027\uffea\001\002\000\016\013\035\014\037\020" +
    "\040\026\036\034\034\035\043\001\002\000\026\010\uffd9" +
    "\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\030\uffd9\001\002\000\016\013\035\014\037" +
    "\020\040\026\036\034\034\035\043\001\002\000\004\020" +
    "\117\001\002\000\016\013\035\014\037\020\040\026\036" +
    "\034\034\035\043\001\002\000\016\013\035\014\037\020" +
    "\040\026\036\034\034\035\043\001\002\000\026\010\uffd8" +
    "\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\030\uffd8\001\002\000\016\013\046\014\047" +
    "\015\044\016\050\017\045\030\051\001\002\000\026\010" +
    "\uffda\011\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\021\uffda\022\uffda\030\uffda\001\002\000\016\013\035\014" +
    "\037\020\040\026\036\034\034\035\043\001\002\000\016" +
    "\013\035\014\037\020\040\026\036\034\034\035\043\001" +
    "\002\000\016\013\035\014\037\020\040\026\036\034\034" +
    "\035\043\001\002\000\016\013\035\014\037\020\040\026" +
    "\036\034\034\035\043\001\002\000\016\013\035\014\037" +
    "\020\040\026\036\034\034\035\043\001\002\000\004\022" +
    "\052\001\002\000\006\031\uffd2\032\uffd2\001\002\000\006" +
    "\031\054\032\056\001\002\000\016\013\035\014\037\020" +
    "\040\026\036\034\034\035\043\001\002\000\010\023\uffce" +
    "\031\uffce\032\uffce\001\002\000\016\013\035\014\037\020" +
    "\040\026\036\034\034\035\043\001\002\000\010\023\uffcd" +
    "\031\uffcd\032\uffcd\001\002\000\010\023\062\031\uffd1\032" +
    "\uffd1\001\002\000\010\023\uffcf\031\uffcf\032\uffcf\001\002" +
    "\000\004\010\065\001\002\000\006\031\054\032\056\001" +
    "\002\000\010\023\uffd0\031\uffd0\032\uffd0\001\002\000\010" +
    "\002\uffd3\025\uffd3\027\uffd3\001\002\000\016\013\046\014" +
    "\047\015\044\016\050\017\045\022\067\001\002\000\006" +
    "\023\uffc9\033\uffc9\001\002\000\006\023\uffc6\033\uffc6\001" +
    "\002\000\006\023\072\033\uffc8\001\002\000\010\023\uffca" +
    "\031\uffca\032\uffca\001\002\000\004\033\075\001\002\000" +
    "\006\023\uffc7\033\uffc7\001\002\000\016\013\035\014\037" +
    "\020\040\026\036\034\034\035\043\001\002\000\016\010" +
    "\077\013\046\014\047\015\044\016\050\017\045\001\002" +
    "\000\006\023\uffc5\033\uffc5\001\002\000\016\011\101\013" +
    "\046\014\047\015\044\016\050\017\045\001\002\000\016" +
    "\013\035\014\037\020\040\026\036\034\034\035\043\001" +
    "\002\000\016\013\046\014\047\015\044\016\050\017\045" +
    "\022\103\001\002\000\006\023\uffcb\033\uffcb\001\002\000" +
    "\006\023\uffc6\033\uffc6\001\002\000\006\023\106\033\uffc8" +
    "\001\002\000\010\023\uffcc\031\uffcc\032\uffcc\001\002\000" +
    "\026\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\045\021\uffdf\022\uffdf\030\uffdf\001\002\000\026\010" +
    "\uffe1\011\uffe1\013\uffe1\014\uffe1\015\044\016\050\017\045" +
    "\021\uffe1\022\uffe1\030\uffe1\001\002\000\026\010\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\015\044\016\050\017\045\021\uffe2" +
    "\022\uffe2\030\uffe2\001\002\000\026\010\uffde\011\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\030\uffde\001\002\000\026\010\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\045\021\uffe0\022\uffe0\030\uffe0" +
    "\001\002\000\016\013\046\014\047\015\044\016\050\017" +
    "\045\021\115\001\002\000\026\010\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\030" +
    "\uffdd\001\002\000\026\010\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\030\uffdb\001" +
    "\002\000\022\011\uffd4\013\035\014\037\020\040\021\uffd4" +
    "\026\036\034\034\035\043\001\002\000\020\011\uffd5\013" +
    "\046\014\047\015\044\016\050\017\045\021\uffd5\001\002" +
    "\000\006\011\122\021\123\001\002\000\016\013\035\014" +
    "\037\020\040\026\036\034\034\035\043\001\002\000\026" +
    "\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\022\uffd7\030\uffd7\001\002\000\020\011\uffd6" +
    "\013\046\014\047\015\044\016\050\017\045\021\uffd6\001" +
    "\002\000\026\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\022\uffdc\030\uffdc\001\002\000" +
    "\004\012\134\001\002\000\006\010\132\011\131\001\002" +
    "\000\006\010\uffe4\011\uffe4\001\002\000\004\034\126\001" +
    "\002\000\010\002\uffe6\025\uffe6\027\uffe6\001\002\000\006" +
    "\010\uffe5\011\uffe5\001\002\000\016\013\035\014\037\020" +
    "\040\026\036\034\034\035\043\001\002\000\020\010\uffe3" +
    "\011\uffe3\013\046\014\047\015\044\016\050\017\045\001" +
    "\002\000\012\004\ufff1\005\ufff1\006\ufff1\007\ufff1\001\002" +
    "\000\004\005\011\001\002\000\010\005\ufffc\006\ufffc\007" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\010\160" +
    "\001\002\000\004\004\uffff\001\002\000\010\004\ufff6\006" +
    "\ufff6\007\ufff6\001\002\000\010\004\ufff7\006\ufff7\007\ufff7" +
    "\001\002\000\004\005\011\001\002\000\010\004\ufffa\006" +
    "\142\007\005\001\002\000\006\006\142\007\005\001\002" +
    "\000\010\004\ufff9\006\142\007\005\001\002\000\010\004" +
    "\ufff8\006\ufff8\007\ufff8\001\002\000\006\006\142\007\005" +
    "\001\002\000\006\006\142\007\005\001\002\000\004\004" +
    "\ufffb\001\002\000\006\006\142\007\005\001\002\000\010" +
    "\005\ufffd\006\ufffd\007\ufffd\001\002\000\012\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\001\002\000\012\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\001\002\000\010\005\011\006\142\007" +
    "\005\001\002\000\012\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\001\002\000\010\004\ufff4\005\ufff4\006\ufff4\001\002\000" +
    "\012\004\ufff2\005\ufff2\006\ufff2\007\ufff2\001\002\000\012" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\001\002\000\010\004" +
    "\ufffe\005\011\006\142\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\014\003\006\004\011\005\005\013\007\015" +
    "\003\001\001\000\004\011\161\001\001\000\002\001\001" +
    "\000\016\006\142\007\147\010\146\013\145\014\144\015" +
    "\143\001\001\000\002\001\001\000\004\013\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\014\017" +
    "\013\001\001\000\004\020\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\025\001\001\000\010\021\031\022" +
    "\026\025\030\001\001\000\002\001\001\000\006\023\126" +
    "\024\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\041\035\040\001\001\000\002\001\001\000\006" +
    "\034\124\035\040\001\001\000\002\001\001\000\006\034" +
    "\115\035\040\001\001\000\006\034\113\035\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\112\035\040\001\001\000\006\034\111\035\040" +
    "\001\001\000\006\034\110\035\040\001\001\000\006\034" +
    "\107\035\040\001\001\000\006\034\106\035\040\001\001" +
    "\000\002\001\001\000\004\037\052\001\001\000\012\026" +
    "\057\027\060\030\054\031\056\001\001\000\006\034\077" +
    "\035\040\001\001\000\002\001\001\000\006\034\065\035" +
    "\040\001\001\000\002\001\001\000\004\044\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\063\030" +
    "\054\031\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\067\001\001\000\004\032" +
    "\070\001\001\000\004\045\072\001\001\000\002\001\001" +
    "\000\004\033\073\001\001\000\002\001\001\000\006\034" +
    "\075\035\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\101\035\040\001\001\000" +
    "\002\001\001\000\004\040\103\001\001\000\004\032\104" +
    "\001\001\000\004\045\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\117\035\040\042\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\123\035\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\134\035\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\156\001\001\000\012\007\152\010\153\014\144\015" +
    "\143\001\001\000\010\007\150\014\144\015\143\001\001" +
    "\000\010\007\151\014\144\015\143\001\001\000\002\001" +
    "\001\000\010\007\155\014\144\015\143\001\001\000\012" +
    "\007\152\010\154\014\144\015\143\001\001\000\002\001" +
    "\001\000\010\007\151\014\144\015\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\162\013\165\014\164\015\163\001\001\000\002\001\001" +
    "\000\004\011\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\162\013\165\014\164\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }



	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	HashMap symbol_table = new HashMap();

   public Object stack(int position) throws Exception {
      return parser.stack(position);
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mod ::= ENTITY exp S 
            { 
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Object[] data = (Object[])stack(-3);
                    if((Boolean)data[1]){
                        Integer val = (Integer)((HashMap)data[0]).get(e);
                        val += x;
                        ((HashMap)data[0]).put(e, val);
                        System.out.println("T: "+(Integer)((HashMap)data[0]).get("temperature")+" H: "+(Integer)((HashMap)data[0]).get("humidity"));
                    }
                
              CUP$parser$result = new java_cup.runtime.Symbol(25/*mod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // mod_l ::= 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*mod_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mod_l ::= mod_l NT$2 mod 
            { 
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*mod_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$2 ::= 
            { 
              Object RESULT = null;
 RESULT = (Object[])stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // nt3 ::= 
            { 
              Object[] RESULT = null;
		
                    Object[] data = (Object[])stack(-3);
                    RESULT = new Object[2];
                    RESULT[0] = data[0];
                    if((Integer)data[1] == (Integer)stack(-1))
                        RESULT[1] = new Boolean(true);
                    else
                        RESULT[1] = new Boolean(false);
                
              CUP$parser$result = new java_cup.runtime.Symbol(31/*nt3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // equal ::= EQUAL exp CO nt3 mod_l CC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*equal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nt2 ::= 
            { 
              Object[] RESULT = null;
		
                    Object[] data = (Object[])stack(-5);
                    RESULT = new Object[2];
                    RESULT[0] = data[0];
                    if((Integer)data[1] > (Integer)stack(-3) && (Integer)data[1] < (Integer)stack(-1))
                        RESULT[1] = new Boolean(true);
                    else
                        RESULT[1] = new Boolean(false);
                
              CUP$parser$result = new java_cup.runtime.Symbol(30/*nt2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // range ::= RANGE exp CM exp CO nt2 mod_l CC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condition ::= equal 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condition ::= range 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conditions ::= condition 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*conditions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conditions ::= conditions NT$1 condition 
            { 
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*conditions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$1 ::= 
            { 
              Object RESULT = null;
 RESULT = (Object[])stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nt1 ::= 
            { 
              Object[] RESULT = null;
		
                    RESULT = new Object[2];
                    RESULT[0] = (HashMap)stack(-4);
                    RESULT[1] = (Integer)stack(-2);
                
              CUP$parser$result = new java_cup.runtime.Symbol(29/*nt1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case ::= CASE exp IS CO nt1 conditions CC S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_l ::= 
            { 
              Integer[] RESULT = null;
		 RESULT = new Integer[2]; RESULT[0] = 0; RESULT[1] = 9; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*exp_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_l ::= exp 
            { 
              Integer[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    RESULT = new Integer[2];
                    RESULT[0] = x;
                    RESULT[1] = 1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(32/*exp_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_l ::= exp_l CM exp 
            { 
              Integer[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		                          
                    RESULT = x;
                    RESULT[0] += y;
                    RESULT[1] += 1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(32/*exp_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // avg ::= AVG RO exp_l RC 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if(x[1] != 0)
                    RESULT = x[0]/x[1];
                else
                    RESULT = 0; 
                
              CUP$parser$result = new java_cup.runtime.Symbol(27/*avg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= avg 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= VAR 
            { 
              Integer RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Integer)symbol_table.get(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= INT 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= MINUS exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -x; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= PLUS exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= RO exp RC 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp POW exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(""+Math.pow(x, y)); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp DIV exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x / y; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp STAR exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x * y; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp MINUS exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x - y; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp PLUS exp 
            { 
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x + y; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= VAR EQ exp 
            { 
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 symbol_table.put(v, x); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignments ::= assignment 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*assignments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignments ::= assignments CM assignment 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*assignments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // store ::= STORE assignments S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*store*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // command ::= case 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= store 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // commands ::= 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // commands ::= commands NT$0 command 
            { 
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            { 
              Object RESULT = null;
 RESULT = (HashMap)stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configure ::= CONF ENTITY INT S 
            { 
              HashMap RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    HashMap hm = new HashMap();
                    hm.put(e, v);
                    if(e.equals("temperature"))
                        hm.put("humidity", new Integer(50));
                    else
                        hm.put("temperature", new Integer(20));
                    RESULT = hm;
                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*configure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configure ::= CONF ENTITY INT ENTITY INT S 
            { 
              HashMap RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    HashMap hm = new HashMap();                    
                    hm.put(e1, v1);
                    hm.put(e2, v2);
                    RESULT = hm;
                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*configure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // state ::= configure commands 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // token3 ::= TOKEN3 S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*token3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // token2 ::= TOKEN2 S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*token2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // token1 ::= TOKEN1 S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*token1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // token12 ::= token2 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*token12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // token12 ::= token1 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*token12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // token12_l ::= 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*token12_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // token12_l ::= token12_l token12 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*token12_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // token23 ::= token3 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*token23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // token23 ::= token2 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*token23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // token23_3 ::= token23 token23 token23 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*token23_3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // token23_l ::= token23 token23 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*token23_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // token23_l ::= token23_3 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*token23_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // token23_l ::= token23_3 token23_3 token23_3 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*token23_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // token1_l ::= token1 token1 token1 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*token1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // token1_l ::= token1_l token1 token1 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*token1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= token3 token12_l token3 token12_l 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= token1_l token23_l 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP state 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

