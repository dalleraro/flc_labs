
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	public HashMap<String, HashMap<String, Integer>> table = new HashMap<>();
	
	public class PropertyInt {
		String key;
		int value;

		public PropertyInt(String key, Integer value) {
			this.key = key;
			this.value = value;
		}
	}
	public class PropertyDouble {
		String key;
		double value;

		public PropertyDouble(String key, Double value) {
			this.key = key;
			this.value = value;
		}
	}

	public class MinMax {
		int min, max;

		public MinMax(Integer min, Integer max) {
			this.min = min;
			this.max = max;
		}
	}
	
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal RO, RC, BO, BC, CM, S, C, EQ, ARROW, PIPE, M, MPS, PRINT_MIN_MAX, PART;
terminal SEP, TOKEN1, TOKEN2, TOKEN3;
terminal Integer UINT;
terminal String QUOTED_STR;

non terminal prog;
non terminal header, token1_list_e, token1, token2, token3;
non terminal cars;
non terminal car;
non terminal HashMap speed_list;
non terminal PropertyInt speed;
non terminal races, print_list_e;
non terminal print;
non terminal MinMax section_list;
non terminal PropertyDouble performance, performance_list;
non terminal Double part_list;
non terminal Double part;
non terminal Double drive_stat_list;
non terminal Double drive_stat;

non terminal nt_2, nt_3;
non terminal nt_print;

//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP cars SEP races {:
		System.out.println("Correct");
	:}
;

header ::= token1_list_e token2 token1_list_e token3 token1_list_e
	| token1_list_e token3 token1_list_e token2 token1_list_e
;

token1_list_e ::= token1_list_e token1
	|
;

token1 ::= TOKEN1 S
;

token2 ::= TOKEN2 S
;

token3 ::= TOKEN3 S
;

// cars

cars ::= cars car car
	| car car
;

car ::= QUOTED_STR:a BO speed_list:b BC {:
		table.put(a, b);
	:}
;

speed_list ::= speed_list:a CM speed:b {:
		RESULT = a;
		RESULT.put(b.key, b.value);
	:}
	| speed:a {:
		RESULT = new HashMap<String, Integer>();
		RESULT.put(a.key, a.value);
	:}
;

speed ::= QUOTED_STR:a EQ UINT:b MPS {:
		RESULT = new PropertyInt(a, b);
	:}
;

// races

races ::= print_list_e performance_list:a {:
		System.out.println("WINNER: " + a.key + " " + a.value + " s");
	:}
;

print_list_e ::= print_list_e print
	|
;

performance_list ::= performance_list:a performance:b {:
		RESULT = (a.value < b.value)? a : b;
	:}
	| performance:a {:
		RESULT = a;
	:}
;

print ::= PRINT_MIN_MAX RO QUOTED_STR RC RO nt_2 section_list:a RC S {:
		System.out.println("MIN: " + a.min + " MAX: " + a.max);
	:}
;

section_list ::= section_list:a CM QUOTED_STR:b {:
		Integer value = table.get((String)parser.stack(-3)).get(b);
		RESULT = new MinMax(Math.min(a.min, value), Math.max(a.max, value));
	:}
	| QUOTED_STR:b {:
		Integer value = table.get((String)parser.stack(-1)).get(b);
		RESULT = new MinMax(value, value);
	:}
;

performance ::= QUOTED_STR:a nt_print ARROW nt_2 part_list:b S {:
		System.out.println("TOTAL: " + b + " s");
		RESULT = new PropertyDouble(a, b);
	:}
;

part_list ::= part_list:a PIPE nt_2 part:b {:
		RESULT = a + b;
	:}
	| part:a {:
		RESULT = a;
	:}
;

part ::= PART UINT:b C nt_3 drive_stat_list:c {:
		System.out.println("PART" + b + ": " + c + " s");
		RESULT = c;
	:}
;

drive_stat_list ::= drive_stat_list:a CM nt_2 drive_stat:b {:
		RESULT = a + b;
	:}
	| drive_stat:a {:
		RESULT = a;
	:}
;

drive_stat ::= QUOTED_STR:b UINT:c M {:
		int speed = table.get((String)parser.stack(-3)).get(b);
		RESULT = ((double)c)/speed;
	:}
;

nt_2 ::= {:
		RESULT = parser.stack(-2);
	:}
;

nt_3 ::= {:
		RESULT = parser.stack(-3);
	:}
;

nt_print ::= {:
		System.out.println((String)parser.stack(0));
	:}
;