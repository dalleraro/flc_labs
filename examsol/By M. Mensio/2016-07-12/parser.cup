
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	public HashMap<String, Integer> table = new HashMap<>();
	
	public class MinMax {
		int min, max;

		public MinMax(Integer min, Integer max) {
			this.min = min;
			this.max = max;
		}
	}

	public class PrintEnabler {
		boolean enable;
		int value;

		public PrintEnabler(Boolean enable, Integer value) {
			this.enable = enable;
			this.value = value;
		}
	}
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP, S, EQ, PLUS, MINUS, STAR, DIV;
terminal CM, RO, RC, BO, BC, C;
terminal TOKEN1, TOKEN2, DATE;
terminal STAT, CASE, SWITCH, PRINT, MIN, MAX;

terminal String VAR;
terminal Integer UINT;

non terminal prog;

non terminal header, token_list_e, token1, token2, date;
non terminal program, instr_list, instr, assign_instr, switch_instr;

non terminal Integer exp, stat_func, case_func, var;
non terminal String operation;
non terminal MinMax exp_list_e, exp_list;
non terminal Integer action_list, action_stmt;

non terminal case_stmt_list, case_stmt, print_list, print;

non terminal Integer nt_0, nt_1, nt_2;
non terminal PrintEnabler nt_enabler, nt_1b;

precedence left PLUS, MINUS;
precedence right STAR, DIV;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP program {:
		System.out.println("Correct");
	:}
;

header ::= token_list_e
	| token_list_e date token_list_e
	| token_list_e date token_list_e date token_list_e
;

token_list_e ::= token_list_e token1
	| token_list_e token2
	|
;

token1 ::= TOKEN1 S
;

token2 ::= TOKEN2 S
;

date ::= DATE S
;

program ::= instr instr instr instr instr instr_list
;

instr_list ::= instr_list instr instr
	|
;

instr ::= assign_instr S
	| switch_instr S
;

// assign

assign_instr ::= VAR:a EQ exp:b {:
		table.put(a, b);
		System.out.println(a + "=" + b);
	:}
;

exp ::= exp:a PLUS exp:b {:
		RESULT = a + b;
	:}
	| exp:a MINUS exp:b {:
		RESULT = a - b;
	:}
	| exp:a STAR exp:b {:
		RESULT = a * b;
	:}
	| exp:a DIV exp:b {:
		RESULT = a / b;
	:}
	| RO exp:a RC {:
		RESULT = a;
	:}
	| UINT:a {:
		RESULT = a;
	:}
	| var:a {:
		RESULT = a;
	:}
	| stat_func:a {:
		RESULT = a;
	:}
	| case_func:a {:
		RESULT = a;
	:}
;

stat_func ::= STAT RO operation:a CM exp_list_e:b RC {:
		if(a.equals("min")) {
			RESULT = b.min;
		} else {
			RESULT = b.max;
		}
	:}
	| STAT RO operation RC {:
		RESULT = 0;
	:}
;

operation ::= MIN {:
		RESULT = "min";
	:}
	| MAX {:
		RESULT = "max";
	:}
;

exp_list_e ::= exp_list:a {:
		RESULT = a;
	:}
	|
;

exp_list ::= exp_list:a CM exp:b {:
		RESULT = new MinMax(Math.min(a.min, b), Math.max(a.max, b));
	:}
	| exp:a {:
		RESULT = new MinMax(a, a);
	:}
;

case_func ::= CASE RO var CM action_list:a RC {:
		RESULT = a;
	:}
;

var ::= VAR:a {:
		RESULT = table.get(a);
		//System.out.println(a + RESULT);
	:}
;

action_list ::= action_list:a nt_2 CM action_stmt:b {:
		if(a != 0) {
			RESULT = a;
		} else {
			RESULT = b;
		}
	:}
	| action_stmt:a {:
		RESULT = a;
	:}
;

nt_2 ::= {:
		RESULT = (Integer)parser.stack(-2);
	:}
;

action_stmt ::= exp:b nt_2:a C exp:c {:
		if(a == b) {
			RESULT = c;
		} else {
			RESULT = 0;
		}
	:}
;

// switch

switch_instr ::= SWITCH var BO case_stmt_list BC
;

case_stmt_list ::= case_stmt_list nt_2 case_stmt
	| nt_1 case_stmt
;

nt_1 ::= {:
		RESULT = (Integer)parser.stack(-1);
	:}
;

nt_0 ::= {:
		RESULT = (Integer)parser.stack(0);
	:}
;

case_stmt ::= CASE exp C nt_enabler print_list
;

print_list ::= print_list nt_1b print
	| print
;

print ::= PRINT nt_1b:a exp:b S {:
		if(a.enable) {
			System.out.println(b * a.value);
		}
	:}
;

nt_1b ::= {:
		RESULT = (PrintEnabler)parser.stack(-1);
	:}
;

nt_enabler ::= {:
		int val, val2;
		val = (Integer)parser.stack(-3);
		val2 = (Integer)parser.stack(-1);
		RESULT = new PrintEnabler(val == val2, val2);
	:}
;