
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	HashMap symbol_table = new HashMap();

   public Object stack(int position) throws Exception {
      return parser.stack(position);
   }

   public void outln(String msg) {
      System.out.println(msg);
   }

   public void out(String msg) {
      System.out.print(msg);
   }
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

// terminals
terminal SEP;
//terminal uminus;

// non terminals
non terminal prog;

// precedences
//precedence right uminus;
// to be used like:
//MINUS UINT:a  {:
//		RESULT = -a;
//	:} %prec uminus


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog        ::= ;

