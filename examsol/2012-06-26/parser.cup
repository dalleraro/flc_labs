
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc
:};

parser code {:

	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}
:};


action code {:
	
	public Map<String, Double> table = new HashMap<>();

	public class AuctionHelper {
		public String best_offerer;
		public double offer;
		public int time_limit;

		public AuctionHelper(Double amount, Integer time_limit) {
			this.best_offerer = null;
			this.offer = offer;
			this.time_limit = time_limit;
		}
	}
	
:}


//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal SEP;
terminal C, CM , S, AUCTION, MIN, EURO, ARROW;
terminal HOUR, CODE;
terminal String ALPHA_STR;
terminal Double CURRENCY;
terminal String USER_CODE, QUOTED_STR;
terminal Integer UINT;

non terminal prog;
non terminal header, hour_list_e, hour, code_;
non terminal currencies, currency;
non terminal user_list_e, user_list;
non terminal user;
non terminal auctions, auction;
non terminal AuctionHelper advance_list;
non terminal AuctionHelper advance;
non terminal alpha_str;

non terminal AuctionHelper nt_auction;
non terminal nt_2, nt_3;

//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP currencies SEP auctions {:
		System.out.println("Correct");
	:}
;

// header

header ::= hour hour_list_e code_ hour_list_e code_ hour_list_e
	| code_ hour hour_list_e code_ hour_list_e
	| code_ code_ hour hour_list_e
;

hour_list_e ::= hour_list_e hour
	|
;

hour ::= HOUR S
;

code_ ::= CODE S
;

// currencies

currencies ::= currencies currency
	| currency currency currency
;

currency ::= CURRENCY alpha_str alpha_str C nt_3 user_list_e S
;

alpha_str ::= ALPHA_STR
	| EURO
;

user_list_e ::= user_list
	|
;

user_list ::= user_list CM nt_2 user
	| user
;

user ::= USER_CODE:a CURRENCY:b {:
		double value = (Double)parser.stack(-2);
		value *= b;
		if(table.get(a) == null) {
			table.put(a, value);
		} else {
			// increase deposit
			table.put(a, table.get(a) + value);
		}
	:}
;

// auctions

auctions ::= auctions auction auction
	|
;

auction ::= AUCTION UINT C QUOTED_STR C UINT MIN nt_auction ARROW advance_list:a S {:
		System.out.println("Winner is " + a.best_offerer + " price " + a.offer + " euro");
		Double money = table.get(a.best_offerer);
		money -= a.offer;
		table.put(a.best_offerer, money);
	:}
;

nt_auction ::= {:
		int auct_number = (Integer)parser.stack(-5);
		int time_limit = (Integer)parser.stack(-1);
		System.out.println("Auction " + auct_number);
		RESULT = new AuctionHelper(0., time_limit);
	:}
;

advance_list ::= advance_list CM advance:a {:
		RESULT = a;
	:}
	| advance:a {:
		RESULT = a;
	:}
;

advance ::= USER_CODE:a C UINT:b C CURRENCY:c EURO {:
		AuctionHelper helper = (AuctionHelper)parser.stack(-7);
		Double money = table.get(a);
		if(c < helper.offer) {
			System.out.println(" " + a + ": Error, advance less than the current auction value");
		} else if(b > helper.time_limit) {
			System.out.println(" " + a + ": Error, advance out of time");
		} else if(money < c) {
			System.out.println(" " + a + ": Error, available only " + money + " euro");
		} else {
			System.out.println(" " + a + ": New auction price " + c + " euro");
			helper.best_offerer = a;
			helper.offer = c;
		}
		RESULT = helper;
	:}
;

nt_2 ::= {:
		RESULT = parser.stack(-2);
	:}
;

nt_3 ::= {:
		RESULT = parser.stack(-3);
	:}
;