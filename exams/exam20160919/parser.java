
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jul 18 14:56:06 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Jul 18 14:56:06 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\004\010\000\002\005\005\000\002\005\005" +
    "\000\002\006\015\000\002\006\005\000\002\007\004\000" +
    "\002\007\002\000\002\032\002\000\002\010\005\000\002" +
    "\015\011\000\002\015\011\000\002\015\006\000\002\015" +
    "\006\000\002\015\002\000\002\033\002\000\002\011\005" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\013\000\002\013\013\000\002\016\003\000\002" +
    "\016\003\000\002\021\003\000\002\022\003\000\002\020" +
    "\006\000\002\025\003\000\002\025\002\000\002\026\005" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\005\000\002\017\003\000\002\017\003\000\002\014" +
    "\015\000\002\030\002\000\002\023\006\000\002\023\003" +
    "\000\002\031\002\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\005\004\006\007\001\002\000\004\005" +
    "\165\001\002\000\006\005\146\006\147\001\002\000\004" +
    "\002\144\001\002\000\006\005\ufff8\006\ufff8\001\002\000" +
    "\004\004\011\001\002\000\010\020\013\021\ufff1\022\ufff1" +
    "\001\002\000\004\002\000\001\002\000\006\033\120\034" +
    "\121\001\002\000\006\021\ufff7\022\ufff7\001\002\000\006" +
    "\021\022\022\021\001\002\000\010\002\ufff6\021\ufff0\022" +
    "\ufff0\001\002\000\010\002\uffec\021\uffec\022\uffec\001\002" +
    "\000\010\002\uffed\021\uffed\022\uffed\001\002\000\004\037" +
    "\075\001\002\000\006\023\025\024\024\001\002\000\010" +
    "\002\uffee\021\uffee\022\uffee\001\002\000\006\033\026\034" +
    "\027\001\002\000\006\033\026\034\027\001\002\000\014" +
    "\012\uffe9\016\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000" +
    "\014\012\uffe8\016\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002" +
    "\000\012\012\034\030\031\031\032\032\033\001\002\000" +
    "\012\012\034\030\031\031\032\032\033\001\002\000\012" +
    "\010\uffda\013\uffda\026\uffda\027\uffda\001\002\000\012\010" +
    "\uffd9\013\uffd9\026\uffd9\027\uffd9\001\002\000\012\012\034" +
    "\030\031\031\032\032\033\001\002\000\010\010\037\026" +
    "\036\027\040\001\002\000\012\012\034\030\031\031\032" +
    "\032\033\001\002\000\004\025\042\001\002\000\012\012" +
    "\034\030\031\031\032\032\033\001\002\000\012\010\uffdd" +
    "\013\uffdd\026\036\027\uffdd\001\002\000\004\012\051\001" +
    "\002\000\004\011\045\001\002\000\004\011\uffe7\001\002" +
    "\000\004\025\042\001\002\000\004\007\050\001\002\000" +
    "\004\007\uffe6\001\002\000\010\002\uffeb\021\uffeb\022\uffeb" +
    "\001\002\000\010\013\uffe3\025\042\037\056\001\002\000" +
    "\004\013\061\001\002\000\006\013\uffe1\014\uffe1\001\002" +
    "\000\006\013\uffe4\014\057\001\002\000\006\013\uffe0\014" +
    "\uffe0\001\002\000\006\013\uffdf\014\uffdf\001\002\000\006" +
    "\025\042\037\056\001\002\000\006\013\uffe2\014\uffe2\001" +
    "\002\000\012\007\uffe5\011\uffe5\013\uffe5\014\uffe5\001\002" +
    "\000\012\010\uffde\013\uffde\026\uffde\027\uffde\001\002\000" +
    "\010\013\064\026\036\027\040\001\002\000\012\010\uffdb" +
    "\013\uffdb\026\uffdb\027\uffdb\001\002\000\012\010\uffdc\013" +
    "\uffdc\026\uffdc\027\uffdc\001\002\000\012\012\034\030\031" +
    "\031\032\032\033\001\002\000\010\010\070\026\036\027" +
    "\040\001\002\000\004\025\042\001\002\000\004\011\072" +
    "\001\002\000\004\025\042\001\002\000\004\007\074\001" +
    "\002\000\010\002\uffea\021\uffea\022\uffea\001\002\000\004" +
    "\035\076\001\002\000\004\037\077\001\002\000\004\035" +
    "\100\001\002\000\004\015\101\001\002\000\006\033\026" +
    "\034\027\001\002\000\004\016\103\001\002\000\004\035" +
    "\uffd7\001\002\000\004\035\107\001\002\000\006\007\113" +
    "\014\112\001\002\000\006\007\uffd5\014\uffd5\001\002\000" +
    "\004\036\110\001\002\000\004\037\111\001\002\000\006" +
    "\007\uffd3\014\uffd3\001\002\000\004\035\uffd4\001\002\000" +
    "\010\002\uffd8\021\uffd8\022\uffd8\001\002\000\004\035\107" +
    "\001\002\000\006\007\uffd6\014\uffd6\001\002\000\006\021" +
    "\022\022\021\001\002\000\010\002\uffef\021\uffef\022\uffef" +
    "\001\002\000\004\037\130\001\002\000\004\037\122\001" +
    "\002\000\006\007\124\017\123\001\002\000\004\033\125" +
    "\001\002\000\006\021\ufff3\022\ufff3\001\002\000\004\037" +
    "\126\001\002\000\004\007\127\001\002\000\006\021\ufff4" +
    "\022\ufff4\001\002\000\006\007\132\017\131\001\002\000" +
    "\004\034\133\001\002\000\006\021\ufff2\022\ufff2\001\002" +
    "\000\004\037\134\001\002\000\004\007\135\001\002\000" +
    "\006\021\ufff5\022\ufff5\001\002\000\006\005\137\006\140" +
    "\001\002\000\010\004\ufff9\005\ufff9\006\ufff9\001\002\000" +
    "\006\005\ufff8\006\ufff8\001\002\000\006\005\137\006\142" +
    "\001\002\000\006\004\ufff8\005\ufff8\001\002\000\006\004" +
    "\ufffe\005\137\001\002\000\004\002\001\001\002\000\006" +
    "\004\uffff\006\153\001\002\000\004\005\152\001\002\000" +
    "\004\006\150\001\002\000\004\006\151\001\002\000\006" +
    "\004\ufffa\006\ufffa\001\002\000\006\005\ufffd\006\ufffd\001" +
    "\002\000\004\006\154\001\002\000\004\006\155\001\002" +
    "\000\004\006\156\001\002\000\004\006\157\001\002\000" +
    "\004\006\160\001\002\000\004\006\161\001\002\000\004" +
    "\006\162\001\002\000\004\006\163\001\002\000\004\006" +
    "\164\001\002\000\006\004\ufffb\006\ufffb\001\002\000\004" +
    "\005\166\001\002\000\006\005\ufffc\006\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\003\005\004\007\005\004\001\001\000" +
    "\002\001\001\000\004\006\144\001\001\000\002\001\001" +
    "\000\004\007\135\001\001\000\002\001\001\000\006\010" +
    "\011\015\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\014\001\001\000\012\011\015\012\022\013" +
    "\017\014\016\001\001\000\004\033\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\065\001\001\000\004" +
    "\016\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\034\001\001\000\004\017\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\062\001\001\000" +
    "\002\001\001\000\004\017\061\001\001\000\006\020\043" +
    "\021\042\001\001\000\004\017\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\046\022\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\054\025\051" +
    "\026\053\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\054\027\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\066\001\001\000" +
    "\002\001\001\000\006\020\043\021\070\001\001\000\002" +
    "\001\001\000\006\020\046\022\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\101\001" +
    "\001\000\002\001\001\000\004\030\103\001\001\000\006" +
    "\023\104\024\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\113\001\001\000\002\001\001\000\004\024" +
    "\114\001\001\000\002\001\001\000\010\012\116\013\017" +
    "\014\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\140\001\001" +
    "\000\002\001\001\000\004\007\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   public Object stack(int position) throws Exception {
      return parser.stack(position);
   }

   public void outln(String msg) {
      System.out.println(msg);
   }

   public void out(String msg) {
      System.out.print(msg);
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var ::= VAR_QT OPER UREAL 
            { parser.Tree.reduce(3,"var",0);
              Double RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                     Double[] mods = (Double[])stack(-3);
                     if(v.equals("PRESSURE"))
                        RESULT = x * mods[0];
                     else
                        RESULT = x * mods[1];
                     if(o.equals("SUB"))
                        RESULT = -RESULT;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(18/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              Double[] RESULT = null;
		 RESULT = (Double[])stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*nt1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_list ::= var 
            { parser.Tree.reduce(1,"var_list",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_list ::= var_list CM nt1 var 
            { parser.Tree.reduce(4,"var_list",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x+y; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              Double[] RESULT = null;
		 
                     RESULT = new Double[2];
                     RESULT[0] = (Double)stack(-6);
                     RESULT[1] = (Double)stack(-4);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(22/*nt0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // state_ch2 ::= STATE_CHANGE2 UREAL VAR_QT UREAL VAR_QT HASH elem ARROW nt0 var_list S 
            { parser.Tree.reduce(11,"state_ch2",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     HashMap<String, Double> values = (HashMap)stack(-11);
                     Double value = values.get(e);
                     value += x;
                     values.put(e, value);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*state_ch2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= FALSE 
            { parser.Tree.reduce(1,"expr",0);
              Boolean RESULT = null;
		 RESULT = false; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= TRUE 
            { parser.Tree.reduce(1,"expr",0);
              Boolean RESULT = null;
		 RESULT = true; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= RO expr RC 
            { parser.Tree.reduce(3,"expr",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NOT expr 
            { parser.Tree.reduce(2,"expr",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = !x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr OR expr 
            { parser.Tree.reduce(3,"expr",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x || y; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr AND expr 
            { parser.Tree.reduce(3,"expr",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x && y; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // f_elem ::= UREAL 
            { parser.Tree.reduce(1,"f_elem",0);
              Double[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                     RESULT = new Double[2];
                     RESULT[0] = x;
                     RESULT[1] = new Double(1);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(21/*f_elem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // f_elem ::= avg 
            { parser.Tree.reduce(1,"f_elem",0);
              Double[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                     RESULT = new Double[2];
                     RESULT[0] = x;
                     RESULT[1] = new Double(1);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(21/*f_elem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // f_list ::= f_elem 
            { parser.Tree.reduce(1,"f_list",0);
              Double[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                     RESULT = x;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*f_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // f_list ::= f_list CM f_elem 
            { parser.Tree.reduce(3,"f_list",0);
              Double[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] y = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                     RESULT = new Double[2];
                     RESULT[0] = x[0] + y[0];
                     RESULT[1] = x[1] + y[1];
                  
              CUP$parser$result = new java_cup.runtime.Symbol(20/*f_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // f_list_e ::= 
            { parser.Tree.reduce(0,"f_list_e",0);
              Double[] RESULT = null;
		 
                     RESULT = new Double[2];
                     RESULT[0] = new Double(0);
                     RESULT[1] = new Double(0);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*f_list_e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // f_list_e ::= f_list 
            { parser.Tree.reduce(1,"f_list_e",0);
              Double[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*f_list_e*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // avg ::= AVG RO f_list_e RC 
            { parser.Tree.reduce(4,"avg",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     if(x[1] != 0)
                        RESULT = x[0] / x[1];
                     else 
                        RESULT = 0.0;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(14/*avg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // avgf ::= avg 
            { parser.Tree.reduce(1,"avgf",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*avgf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // avgt ::= avg 
            { parser.Tree.reduce(1,"avgt",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*avgt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elem ::= POWER 
            { parser.Tree.reduce(1,"elem",0);
              String RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*elem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elem ::= WATER 
            { parser.Tree.reduce(1,"elem",0);
              String RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = w; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*elem*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // state_ch1 ::= STATE_CHANGE1 DECREASE elem expr QM avgt C avgf S 
            { parser.Tree.reduce(9,"state_ch1",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     HashMap<String, Double> values = (HashMap)stack(-9);
                     Double value = values.get(e);
                     if(b)
                        value -= t;
                     else
                        value -= f;
                     values.put(e, value);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*state_ch1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // state_ch1 ::= STATE_CHANGE1 INCREASE elem expr QM avgt C avgf S 
            { parser.Tree.reduce(9,"state_ch1",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     HashMap<String, Double> values = (HashMap)stack(-9);
                     Double value = values.get(e);
                     if(b)
                        value += t;
                     else
                        value += f;
                     values.put(e, value);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*state_ch1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= state_ch2 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT = null;
		
                     HashMap<String, Double> values = (HashMap)stack(-1);  
                     outln("power: "+values.get("POWER")+", water: "+values.get("WATER"));
                  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= state_ch1 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT = null;
		
                     HashMap<String, Double> values = (HashMap)stack(-1);  
                     outln("power: "+values.get("POWER")+", water: "+values.get("WATER"));
                  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // commands ::= command 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // commands ::= commands NT$1 command 
            { parser.Tree.reduce(3,"commands",0);
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Object RESULT = null;
 RESULT = (HashMap<String, Double>)stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set ::= 
            { parser.Tree.reduce(0,"set",0);
              HashMap RESULT = null;
		
                     RESULT = new HashMap<String, Double>();
                     RESULT.put("WATER", new Double(100.0));
                     RESULT.put("POWER", new Double(100.0));
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set ::= SET WATER UREAL S 
            { parser.Tree.reduce(4,"set",0);
              HashMap RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new HashMap<String, Double>();
                     RESULT.put("WATER", x);
                     RESULT.put("POWER", new Double(100.0));
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set ::= SET POWER UREAL S 
            { parser.Tree.reduce(4,"set",0);
              HashMap RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new HashMap<String, Double>();
                     RESULT.put("WATER", new Double(100.0));
              
                     RESULT.put("POWER", x);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set ::= SET POWER UREAL DASH WATER UREAL S 
            { parser.Tree.reduce(7,"set",0);
              HashMap RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new HashMap<String, Double>();
                     RESULT.put("WATER", y);
                     RESULT.put("POWER", x);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set ::= SET WATER UREAL DASH POWER UREAL S 
            { parser.Tree.reduce(7,"set",0);
              HashMap RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     RESULT = new HashMap<String, Double>();
                     RESULT.put("water", x);
                     RESULT.put("power", y);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*set*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // states ::= set NT$0 commands 
            { parser.Tree.reduce(3,"states",0);
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*states*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT = null;

                     HashMap<String, Double> values = (HashMap)stack(0);  
                     outln("power: "+values.get("POWER")+", water: "+values.get("WATER"));
                     RESULT = values;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(24/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // token_l2 ::= 
            { parser.Tree.reduce(0,"token_l2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*token_l2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // token_l2 ::= token_l2 TOKEN 
            { parser.Tree.reduce(2,"token_l2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*token_l2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // date_l1 ::= DATE DATE DATE 
            { parser.Tree.reduce(3,"date_l1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*date_l1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // date_l1 ::= date_l1 DATE DATE DATE DATE DATE DATE DATE DATE DATE DATE 
            { parser.Tree.reduce(11,"date_l1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*date_l1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // token_l1 ::= TOKEN TOKEN TOKEN 
            { parser.Tree.reduce(3,"token_l1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*token_l1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // token_l1 ::= token_l1 TOKEN TOKEN 
            { parser.Tree.reduce(3,"token_l1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*token_l1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= DATE token_l2 DATE token_l2 DATE token_l2 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= token_l1 date_l1 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP states 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;
		
		      System.out.println("Correct");
	      
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

