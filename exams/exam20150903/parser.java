
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jul 14 18:12:39 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;

/** CUP v0.10k generated parser.
  * @version Fri Jul 14 18:12:39 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\003\007\000\002\004" +
    "\011\000\002\004\011\000\002\005\005\000\002\005\002" +
    "\000\002\006\005\000\002\006\004\000\002\007\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\017\006\000\002\010\004\000\002\011\004\000\002\011" +
    "\002\000\002\012\013\000\002\014\002\000\002\020\006" +
    "\000\002\020\003\000\002\015\002\000\002\021\003\000" +
    "\002\026\004\000\002\026\003\000\002\027\007\000\002" +
    "\016\002\000\002\024\006\000\002\024\003\000\002\025" +
    "\006\000\002\022\006\000\002\022\003\000\002\023\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\017\ufffc\020\ufffc\021\ufffc\001\002\000" +
    "\010\017\106\020\105\021\104\001\002\000\004\002\103" +
    "\001\002\000\004\016\007\001\002\000\004\025\011\001" +
    "\002\000\004\025\011\001\002\000\004\011\066\001\002" +
    "\000\006\016\013\025\011\001\002\000\006\024\ufff2\025" +
    "\ufff2\001\002\000\004\025\011\001\002\000\006\016\ufffb" +
    "\025\ufffb\001\002\000\006\024\022\025\023\001\002\000" +
    "\004\002\000\001\002\000\006\002\ufff4\025\023\001\002" +
    "\000\006\024\ufff3\025\ufff3\001\002\000\004\007\050\001" +
    "\002\000\004\014\025\001\002\000\006\002\uffea\025\uffea" +
    "\001\002\000\004\026\uffe8\001\002\000\004\026\030\001" +
    "\002\000\006\004\uffe6\015\uffe6\001\002\000\004\005\036" +
    "\001\002\000\006\004\032\015\033\001\002\000\006\002" +
    "\uffe9\025\uffe9\001\002\000\004\026\uffed\001\002\000\004" +
    "\026\030\001\002\000\006\004\uffe7\015\uffe7\001\002\000" +
    "\004\025\uffed\001\002\000\004\025\042\001\002\000\010" +
    "\004\uffe5\006\045\015\uffe5\001\002\000\010\004\uffe3\006" +
    "\uffe3\015\uffe3\001\002\000\004\027\043\001\002\000\004" +
    "\022\044\001\002\000\010\004\uffe2\006\uffe2\015\uffe2\001" +
    "\002\000\004\025\uffed\001\002\000\004\025\042\001\002" +
    "\000\010\004\uffe4\006\uffe4\015\uffe4\001\002\000\004\025" +
    "\051\001\002\000\004\010\052\001\002\000\004\007\053" +
    "\001\002\000\004\025\ufff0\001\002\000\004\025\055\001" +
    "\002\000\006\006\uffec\010\uffec\001\002\000\006\006\uffee" +
    "\010\uffee\001\002\000\006\006\060\010\061\001\002\000" +
    "\004\025\uffed\001\002\000\004\004\062\001\002\000\006" +
    "\024\ufff1\025\ufff1\001\002\000\004\025\055\001\002\000" +
    "\006\006\uffef\010\uffef\001\002\000\006\002\uffeb\025\uffeb" +
    "\001\002\000\004\025\071\001\002\000\010\003\077\006" +
    "\076\012\075\001\002\000\010\003\ufff6\006\ufff6\012\ufff6" +
    "\001\002\000\004\013\072\001\002\000\004\027\073\001" +
    "\002\000\004\023\074\001\002\000\010\003\ufff5\006\ufff5" +
    "\012\ufff5\001\002\000\006\016\ufff9\025\ufff9\001\002\000" +
    "\004\025\071\001\002\000\004\025\071\001\002\000\010" +
    "\003\ufff7\006\ufff7\012\ufff7\001\002\000\010\003\ufff8\006" +
    "\ufff8\012\ufff8\001\002\000\006\016\ufffa\025\ufffa\001\002" +
    "\000\004\002\001\001\002\000\004\004\115\001\002\000" +
    "\004\004\110\001\002\000\004\004\107\001\002\000\012" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\001\002\000\006\017" +
    "\ufffc\021\ufffc\001\002\000\006\017\106\021\112\001\002" +
    "\000\004\004\113\001\002\000\006\016\ufffc\017\ufffc\001" +
    "\002\000\006\016\uffff\017\106\001\002\000\006\017\ufffc" +
    "\020\ufffc\001\002\000\006\017\106\020\117\001\002\000" +
    "\004\004\120\001\002\000\006\016\ufffc\017\ufffc\001\002" +
    "\000\006\016\ufffe\017\106\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\003\004\004\005\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\011\007\007\001\001\000\004\007\101\001\001\000" +
    "\002\001\001\000\004\007\013\001\001\000\006\010\016" +
    "\011\015\001\001\000\004\007\014\001\001\000\002\001" +
    "\001\000\010\012\020\026\017\027\023\001\001\000\002" +
    "\001\001\000\004\027\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\025\001\001\000\006\024\030\025\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\033\001\001\000\004\025\034\001" +
    "\001\000\002\001\001\000\004\015\036\001\001\000\006" +
    "\022\037\023\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\045\001\001\000\004\023\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\053\001\001\000\006\020\056\021" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\066\017\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\100\001\001\000\004\017\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\113\001\001" +
    "\000\002\001\001\000\004\005\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\120\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    symbol_table = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   public HashMap symbol_table;

   public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
    
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   public class Speed{
      public String n;
      public Integer v;

      public Speed(String n, Integer v){
         this.n = n;
         this.v = v;
      }
   }

   public class MinMax{
      public Integer min;
      public Integer max;

      public MinMax(Integer min, Integer max){
         this.min = min;
         this.max = max;
      }
   }

   public class Car{
      public String n;
      public Double t;

      public Car(String n, Double t){
         this.n = n;
         this.t = t;
      }
   }

   public void out(String str){
      System.out.println(str);
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stat ::= NAME NUM M 
            { parser.Tree.reduce(3,"stat",0);
              Double RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        Integer speed = (Integer)((HashMap)parser.stack(-3)).get(n);
                        RESULT = new Double(d) / new Double(speed);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(17/*stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stats ::= stat 
            { parser.Tree.reduce(1,"stats",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = x;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stats*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stats ::= stats CM nt1 stat 
            { parser.Tree.reduce(4,"stats",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = x + y;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stats*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // part ::= PART C nt1 stats 
            { parser.Tree.reduce(4,"part",0);
              Double RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        out(p+": "+s+" s");
                        RESULT = s;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(19/*part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parts ::= part 
            { parser.Tree.reduce(1,"parts",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = x;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(18/*parts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parts ::= parts PIPE nt1 part 
            { parser.Tree.reduce(4,"parts",0);
              Double RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = x + y;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(18/*parts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nt2 ::= 
            { parser.Tree.reduce(0,"nt2",0);
              HashMap RESULT = null;
		 
                        String name = (String)parser.stack(-1);
                        out(name);
                        RESULT = (HashMap)parser.symbol_table.get(name);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(12/*nt2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // performance ::= NAME ARROW nt2 parts S 
            { parser.Tree.reduce(5,"performance",0);
              Car RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        out("TOTAL: "+p+" s");
                        RESULT = new Car(n, p);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(21/*performance*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // performances ::= performance 
            { parser.Tree.reduce(1,"performances",0);
              Car RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Car x = (Car)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = x;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(20/*performances*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // performances ::= performances performance 
            { parser.Tree.reduce(2,"performances",0);
              Car RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Car x = (Car)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Car y = (Car)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(x.t > y.t)
                           RESULT = y;
                        else 
                           RESULT = x;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(20/*performances*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // section ::= NAME 
            { parser.Tree.reduce(1,"section",0);
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = (Integer)((HashMap)parser.stack(-1)).get(n);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(15/*section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              HashMap RESULT = null;
		
                        RESULT = (HashMap)parser.stack(-2);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(11/*nt1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sections ::= section 
            { parser.Tree.reduce(1,"sections",0);
              MinMax RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new MinMax(s, s);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(14/*sections*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sections ::= sections CM nt1 section 
            { parser.Tree.reduce(4,"sections",0);
              MinMax RESULT = null;
		int mmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MinMax mm = (MinMax)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        mm.min = Math.min(mm.min, s);
                        mm.max = Math.max(mm.max, s);
                        RESULT = mm;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(14/*sections*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              HashMap RESULT = null;
		 
                        RESULT = (HashMap)parser.symbol_table.get((String)parser.stack(-2));
                     
              CUP$parser$result = new java_cup.runtime.Symbol(10/*nt0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // print ::= PRINT RO NAME RC RO nt0 sections RC S 
            { parser.Tree.reduce(9,"print",0);
              Object RESULT = null;
		int mmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MinMax mm = (MinMax)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        out("MIN: "+mm.min+" MAX: "+mm.max);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(8/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // print_l ::= 
            { parser.Tree.reduce(0,"print_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*print_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // print_l ::= print_l print 
            { parser.Tree.reduce(2,"print_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*print_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // race ::= print_l performances 
            { parser.Tree.reduce(2,"race",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Car x = (Car)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        out("WINNER: "+x.n+" "+x.t+" s");
                     
              CUP$parser$result = new java_cup.runtime.Symbol(6/*race*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // speed ::= NAME EQ NUM MS 
            { parser.Tree.reduce(4,"speed",0);
              Speed RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Speed(n, v);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(13/*speed*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // speeds ::= speed 
            { parser.Tree.reduce(1,"speeds",0);
              HashMap RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Speed s = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        HashMap hm = new HashMap();
                        hm.put(s.n, s.v);
                        RESULT = hm;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(9/*speeds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // speeds ::= speeds error speed 
            { parser.Tree.reduce(3,"speeds",0);
              HashMap RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*speeds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // speeds ::= speeds CM speed 
            { parser.Tree.reduce(3,"speeds",0);
              HashMap RESULT = null;
		int hmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap hm = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Speed s = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        hm.put(s.n, s.v);
                        RESULT = hm;
                     
              CUP$parser$result = new java_cup.runtime.Symbol(9/*speeds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // car ::= NAME CO speeds CC 
            { parser.Tree.reduce(4,"car",0);
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap hm = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        parser.symbol_table.put(n, hm);
                     
              CUP$parser$result = new java_cup.runtime.Symbol(5/*car*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cars ::= car car 
            { parser.Tree.reduce(2,"cars",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*cars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cars ::= cars car car 
            { parser.Tree.reduce(3,"cars",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*cars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t1 ::= 
            { parser.Tree.reduce(0,"t1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*t1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t1 ::= t1 TOKEN1 S 
            { parser.Tree.reduce(3,"t1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*t1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= t1 TOKEN3 S t1 TOKEN2 S t1 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= t1 TOKEN2 S t1 TOKEN3 S t1 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP cars SEP race 
            { parser.Tree.reduce(5,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

