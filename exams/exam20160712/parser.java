
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jul 18 17:29:18 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Jul 18 17:29:18 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\003\005\000\002\004" +
    "\011\000\002\004\006\000\002\004\003\000\002\005\004" +
    "\000\002\005\002\000\002\006\004\000\002\006\004\000" +
    "\002\007\005\000\002\007\007\000\002\010\003\000\002" +
    "\010\003\000\002\011\006\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\004" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\006\000\002" +
    "\020\011\000\002\025\002\000\002\022\005\000\002\022" +
    "\003\000\002\021\010\000\002\023\006\000\002\023\003" +
    "\000\002\026\002\000\002\024\005\000\002\030\002\000" +
    "\002\012\011\000\002\031\002\000\002\013\005\000\002" +
    "\013\003\000\002\014\007\000\002\027\002\000\002\032" +
    "\002\000\002\015\005\000\002\015\003\000\002\016\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\012\014\ufffb\015\ufffb\016\ufffb\017\ufffb\001" +
    "\002\000\012\014\ufffd\015\127\016\126\017\130\001\002" +
    "\000\004\002\124\001\002\000\004\014\007\001\002\000" +
    "\006\023\014\030\012\001\002\000\010\002\000\023\014" +
    "\030\012\001\002\000\006\023\014\030\012\001\002\000" +
    "\004\005\113\001\002\000\010\002\ufff6\023\ufff6\030\ufff6" +
    "\001\002\000\004\030\016\001\002\000\010\002\ufff5\023" +
    "\ufff5\030\ufff5\001\002\000\004\011\017\001\002\000\004" +
    "\021\uffdf\001\002\000\004\021\023\001\002\000\006\012" +
    "\uffdb\021\uffdb\001\002\000\006\012\107\021\uffdd\001\002" +
    "\000\016\006\024\020\026\021\032\025\025\030\031\032" +
    "\034\001\002\000\016\006\024\020\026\021\032\025\025" +
    "\030\031\032\034\001\002\000\016\006\024\020\026\021" +
    "\032\025\025\030\031\032\034\001\002\000\004\006\072" +
    "\001\002\000\014\013\061\024\047\025\051\026\050\027" +
    "\052\001\002\000\022\004\uffeb\007\uffeb\010\uffeb\013\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\001\002\000\022\004" +
    "\uffed\007\uffed\010\uffed\013\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\001\002\000\004\006\035\001\002\000\022\004" +
    "\uffea\007\uffea\010\uffea\013\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\001\002\000\022\004\uffec\007\uffec\010\uffec\013" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\001\002\000\004" +
    "\030\036\001\002\000\004\007\037\001\002\000\016\006" +
    "\024\020\026\021\032\025\025\030\031\032\034\001\002" +
    "\000\014\013\053\024\047\025\051\026\050\027\052\001" +
    "\002\000\006\007\uffe1\010\044\001\002\000\006\007\uffe2" +
    "\010\uffe2\001\002\000\004\007\045\001\002\000\022\004" +
    "\uffe4\007\uffe4\010\uffe4\013\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\001\002\000\016\006\024\020\026\021\032\025" +
    "\025\030\031\032\034\001\002\000\006\007\uffe3\010\uffe3" +
    "\001\002\000\016\006\024\020\026\021\032\025\025\030" +
    "\031\032\034\001\002\000\016\006\024\020\026\021\032" +
    "\025\025\030\031\032\034\001\002\000\016\006\024\020" +
    "\026\021\032\025\025\030\031\032\034\001\002\000\016" +
    "\006\024\020\026\021\032\025\025\030\031\032\034\001" +
    "\002\000\016\006\024\020\026\021\032\025\025\030\031" +
    "\032\034\001\002\000\016\007\uffe0\010\uffe0\024\047\025" +
    "\051\026\050\027\052\001\002\000\022\004\ufff0\007\ufff0" +
    "\010\ufff0\013\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\001" +
    "\002\000\022\004\ufff2\007\ufff2\010\ufff2\013\ufff2\024\ufff2" +
    "\025\ufff2\026\050\027\052\001\002\000\022\004\ufff1\007" +
    "\ufff1\010\ufff1\013\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\001\002\000\022\004\ufff3\007\ufff3\010\ufff3\013\ufff3\024" +
    "\ufff3\025\ufff3\026\050\027\052\001\002\000\004\022\uffd9" +
    "\001\002\000\004\022\064\001\002\000\010\012\uffda\021" +
    "\uffda\022\uffd8\001\002\000\016\006\024\020\026\021\032" +
    "\025\025\030\031\032\034\001\002\000\010\012\uffd6\021" +
    "\uffd6\022\uffd6\001\002\000\014\004\067\024\047\025\051" +
    "\026\050\027\052\001\002\000\010\012\uffd5\021\uffd5\022" +
    "\uffd5\001\002\000\004\022\064\001\002\000\010\012\uffd7" +
    "\021\uffd7\022\uffd7\001\002\000\004\031\073\001\002\000" +
    "\006\007\074\010\075\001\002\000\016\006\uffe7\020\uffe7" +
    "\021\uffe7\025\uffe7\030\uffe7\032\uffe7\001\002\000\022\004" +
    "\uffe9\007\uffe9\010\uffe9\013\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\001\002\000\016\006\024\020\026\021\032\025" +
    "\025\030\031\032\034\001\002\000\016\007\uffe5\010\uffe5" +
    "\024\047\025\051\026\050\027\052\001\002\000\006\007" +
    "\101\010\102\001\002\000\016\006\024\020\026\021\032" +
    "\025\025\030\031\032\034\001\002\000\022\004\uffe8\007" +
    "\uffe8\010\uffe8\013\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\001\002\000\016\007\uffe6\010\uffe6\024\047\025\051\026" +
    "\050\027\052\001\002\000\022\004\uffef\007\uffef\010\uffef" +
    "\013\uffef\024\uffef\025\uffef\026\uffef\027\uffef\001\002\000" +
    "\014\010\106\024\047\025\051\026\050\027\052\001\002" +
    "\000\022\004\uffee\007\uffee\010\uffee\013\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\001\002\000\004\004\112\001\002" +
    "\000\004\021\023\001\002\000\006\012\uffdc\021\uffdc\001" +
    "\002\000\010\002\uffde\023\uffde\030\uffde\001\002\000\016" +
    "\006\024\020\026\021\032\025\025\030\031\032\034\001" +
    "\002\000\014\004\115\024\047\025\051\026\050\027\052" +
    "\001\002\000\010\002\ufff4\023\ufff4\030\ufff4\001\002\000" +
    "\006\023\014\030\012\001\002\000\006\023\014\030\012" +
    "\001\002\000\006\023\014\030\012\001\002\000\010\002" +
    "\ufff7\023\ufff7\030\ufff7\001\002\000\006\023\014\030\012" +
    "\001\002\000\010\002\ufff8\023\ufff8\030\ufff8\001\002\000" +
    "\004\002\001\001\002\000\012\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\001\002\000\004\004\137\001\002\000\004\004" +
    "\136\001\002\000\004\004\131\001\002\000\012\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\001\002\000\012\014\ufffe\015" +
    "\127\016\126\017\133\001\002\000\004\004\134\001\002" +
    "\000\010\014\ufffb\015\ufffb\016\ufffb\001\002\000\010\014" +
    "\uffff\015\127\016\126\001\002\000\012\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\001\002\000\012\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\003\004\004\005\005\003\001\001\000" +
    "\004\006\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\007\010\010\011\012\012\014\001\001\000" +
    "\010\010\121\011\012\012\014\001\001\000\010\010\115" +
    "\011\012\012\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\017\001\001\000\006\013\021\014\020\001" +
    "\001\000\002\001\001\000\004\031\107\001\001\000\010" +
    "\017\026\020\027\021\032\001\001\000\010\017\104\020" +
    "\027\021\032\001\001\000\010\017\103\020\027\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\037\020\027\021\032\023\040\024\041\001\001" +
    "\000\002\001\001\000\004\026\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\037" +
    "\020\027\021\032\024\045\001\001\000\002\001\001\000" +
    "\010\017\057\020\027\021\032\001\001\000\010\017\056" +
    "\020\027\021\032\001\001\000\010\017\055\020\027\021" +
    "\032\001\001\000\010\017\054\020\027\021\032\001\001" +
    "\000\010\017\053\020\027\021\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\061\001\001\000\006\015" +
    "\062\016\064\001\001\000\004\032\067\001\001\000\010" +
    "\017\065\020\027\021\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\075\001\001\000\002\001\001\000\012\017\076" +
    "\020\027\021\032\022\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\102\020\027\021\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\113\020\027\021\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\116\011\012\012\014\001" +
    "\001\000\010\010\117\011\012\012\014\001\001\000\010" +
    "\010\120\011\012\012\014\001\001\000\002\001\001\000" +
    "\010\010\122\011\012\012\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\131\001\001" +
    "\000\004\006\124\001\001\000\002\001\001\000\004\005" +
    "\134\001\001\000\004\006\124\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	// code to run at the beginning
	// NOTE: is better to do table in action code, no need to use parser.table etc

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



	public boolean generateExceptions = true;
	
	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer(message);
		if (info instanceof Symbol) {
			if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
				if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
					int line = (((Symbol)info).left) + 1;
					int column = (((Symbol)info).right) + 1;
					m.append(" (line " + line + " column " + column + ")");
				}
			}
			System.err.println(m);
		}
	}
	
	public Object stack(int position) throws Exception {
		Object result;
		if(position > 0) {
			String msg = "Cannot read stack at positive position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
				//Report_err
			} else {
				System.err.println("***" + msg + "***");
				return null;
			}
		}
		result = ((Symbol)stack.elementAt(tos + position)).value;
		if(result == null) {
			String msg = "You read null while accessing stack at position: " + position;
			if(generateExceptions) {
				throw new Exception(msg);
			} else {
				System.err.println("***" + msg + "***");
			}
			
		}
		return result;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	HashMap symbol_table = new HashMap();

   public Object stack(int position) throws Exception {
      return parser.stack(position);
   }

   public void outln(String msg) {
      System.out.println(msg);
   }

   public void out(String msg) {
      System.out.print(msg+" ");
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // print ::= PRINT exp S 
            { parser.Tree.reduce(3,"print",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                           Object[] data = (Object[])stack(-3);
                           if((Integer)symbol_table.get((String)data[0]) == (Integer)data[1])
                              out(""+(Integer)data[1] * x);
                        
              CUP$parser$result = new java_cup.runtime.Symbol(12/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // print_l ::= print 
            { parser.Tree.reduce(1,"print_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*print_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // print_l ::= print_l NT$2 print 
            { parser.Tree.reduce(3,"print_l",0);
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*print_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$2 ::= 
            { parser.Tree.reduce(0,"NT$2",0);
              Object RESULT = null;
 RESULT = (Object[])stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nt2 ::= 
            { parser.Tree.reduce(0,"nt2",0);
              Object[] RESULT = null;
		 
                           RESULT = new Object[2];
                           RESULT[0] = (String)stack(-3);
                           RESULT[1] = (Integer)stack(-1);
                        
              CUP$parser$result = new java_cup.runtime.Symbol(21/*nt2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // scase ::= CASE exp C nt2 print_l 
            { parser.Tree.reduce(5,"scase",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*scase*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scases ::= scase 
            { parser.Tree.reduce(1,"scases",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*scases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // scases ::= scases NT$1 scase 
            { parser.Tree.reduce(3,"scases",0);
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*scases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Object RESULT = null;
 RESULT = (String)stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // switch ::= SWITCH VAR CO NT$0 scases CC S 
            { parser.Tree.reduce(7,"switch",0);
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*switch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT = null;
 RESULT = (String)stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // actione ::= exp C exp 
            { parser.Tree.reduce(3,"actione",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                           if(x == (Integer)symbol_table.get((String)stack(-4)))
                              RESULT = y;
                           else
                              RESULT = 0;
                        
              CUP$parser$result = new java_cup.runtime.Symbol(18/*actione*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              String RESULT = null;
		 RESULT = (String)stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*nt1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // actions ::= actione 
            { parser.Tree.reduce(1,"actions",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*actions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // actions ::= actions nt1 CM actione 
            { parser.Tree.reduce(4,"actions",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                           if(y != 0)
                              RESULT = y;
                           else
                              RESULT = x;
                        
              CUP$parser$result = new java_cup.runtime.Symbol(17/*actions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // case ::= CASE RO VAR CM actions RC 
            { parser.Tree.reduce(6,"case",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_l ::= exp 
            { parser.Tree.reduce(1,"exp_l",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*exp_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_l ::= exp_l CM exp 
            { parser.Tree.reduce(3,"exp_l",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                           if(((String)stack(-3)).equals("MIN"))
                              RESULT = Math.min(x, y);
                           else
                              RESULT = Math.max(x, y);
                        
              CUP$parser$result = new java_cup.runtime.Symbol(16/*exp_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              String RESULT = null;
		 RESULT = (String)stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*nt0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stat ::= STAT RO OP CM nt0 exp_l RC 
            { parser.Tree.reduce(7,"stat",0);
              Integer RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stat ::= STAT RO OP RC 
            { parser.Tree.reduce(4,"stat",0);
              Integer RESULT = null;
		 RESULT = 0; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= case 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= stat 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= UINT 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= VAR 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (Integer)symbol_table.get(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= RO exp RC 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= MINUS exp 
            { parser.Tree.reduce(2,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -x; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp DIV exp 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x / y; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp MUL exp 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x * y; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp MINUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x - y; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x + y; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assign ::= VAR EQ exp S 
            { parser.Tree.reduce(4,"assign",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 symbol_table.put(v, x); out(v+"="+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= switch 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= assign 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instructions ::= instruction instruction instruction instruction instruction 
            { parser.Tree.reduce(5,"instructions",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instructions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instructions ::= instructions instruction instruction 
            { parser.Tree.reduce(3,"instructions",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instructions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t ::= TOKEN2 S 
            { parser.Tree.reduce(2,"t",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*t*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // t ::= TOKEN1 S 
            { parser.Tree.reduce(2,"t",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*t*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tl ::= 
            { parser.Tree.reduce(0,"tl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*tl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tl ::= tl t 
            { parser.Tree.reduce(2,"tl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*tl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tl 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tl DATE S tl 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tl DATE S tl DATE S tl 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP instructions 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

