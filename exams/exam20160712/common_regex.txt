
New line in all operating systems
nl             = \r|\n|\r\n

white space or tab
ws			= [ \t]

comment in programming
comment		=	"//".*

comment in programming
"/*" ~ "*/"
or
COMMENT 	= "/*"([^*]*|"*"+[^*/])"*"+\/

quoted string e.g. "abc9"
string               = \" ~ \"

ISBN
ISBN =	[0-9]{2}-[0-9]{2}-[0-9A-Fa-f]{5}-[A-Za-z0-9]

Ip number with decimal representation
ip_num		=	(2(([0-4][0-9])|(5[0-5])))|(1[0-9][0-9])|([1-9][0-9])|([0-9])
ip		=	{ip_num}"."{ip_num}"."{ip_num}"."{ip_num}

first level domain in ip
firstlevel    = it|com|gov|edu|net|uk|fr|de|ne|jp|ch

number unsigned
number		=	[0-9]+

keyword in programming language
keyword              = (if|then|else|while|switch|case|do|break|for|return|void|int|float|double|char|long|unsigned|signed)

directive in c programming
direttive            = "#"(include|define).*{nl} 

double variable in programming
double = (([0-9]+\.[0-9]*) | ([0-9]*\.[0-9]+)) (e|E('+'|'-')?[0-9]+)?

date with following format: dd//mm/yyyy
date		=	((0[1-9])|([1-2][0-9])|(3(0|1)))"/"((0[1-9])|(1(0|1|2)))"/"(2[0-9][0-9][0-9])
	
				// hh:mm
hour		=	(((0|1)[0-9])|(2[0-3]))":"([0-5][0-9])
		
			// name.mp3
song    	=	[a-zA-Z][_a-zA-Z0-9]*".mp3"

Day in dd format and from 01 to 31
DAY			=	0[1-9]|[1-2][0-9]|3[0-1]

month in mm format from 01 to 12
MONTH 			=	0[1-9]|1[0-2]

year in yyyy format
YEAR			=	[0-9]{4}

Digits
/^[0-9]+$/

Alphabetic Characters
/^[a-zA-Z]+$/

Alpha-Numeric Characters
/^[a-zA-Z0-9]+$/

Date (MM/DD/YYYY)/(MM-DD-YYYY)/(MM.DD.YYYY)/(MM DD YYYY)
/^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$/

Email Address
/^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$/

Password
The password must contain one lowercase letter, one uppercase letter, one number, one unique character such as !@#$%^&? and be at least 6 characters long.
/^.*(?=.{6,})(?=.*d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/

US Phone Numbers
/^(?([0-9]{3}))?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/

US Zip code
/^[0-9]{5}(?:-[0-9]{4})?$/

Slug
/^[a-z0-9-]+$/

URL
/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/

IP Address
/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/

HTML Tag
/^<([a-z]+)([^<]+)*(?:>(.*)</1>|s+/>)$/

String trimming
/^s*|s*$/g

All the special characters need to be escaped
/[\-\[\]\/\\\{\}\(\)\*\+\?\.\^\$\|]/

This regular expression will validate all major credit cards: American Express (Amex), Discover, Mastercard, and Visa.
    //All major credit cards regex
'/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|622((12[6-9]|1[3-9][0-9])|([2-8][0-9][0-9])|(9(([0-1][0-9])|(2[0-5]))))[0-9]{10}|64[4-9][0-9]{13}|65[0-9]{14}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})*$/'

Alpha-numeric characters only
'/^[a-zA-Z0-9]*$/'

Alpha-numeric characters with spaces only
'/^[a-zA-Z0-9 ]*$/'

Alphabetic characters only
'/^[a-zA-Z]*$/'

American Express Credit Card
'/^(3[47][0-9]{13})*$/'

Australian Postal Codes
'/^((0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2}))*$/'

Canadian Postal Codes
'/^([ABCEGHJKLMNPRSTVXY][0-9][A-Z] [0-9][A-Z][0-9])*$/'

Canadian Provinces
'/^(?:AB|BC|MB|N[BLTSU]|ON|PE|QC|SK|YT)*$/'

Date (MM/DD/YYYY)
Validate the calendar date in MM/DD/YYYY format with this regex. Optional separators are spaces, hyphens, forward slashes, and periods. The year is limited between 1900 and 2099.
'/^((0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2})*$/'

Date (YYYY/MM/DD)
Validate the calendar date in YYYY/MM/DD format with this regex. Optional separators are spaces, hyphens, forward slashes, and periods. The year is limited between 1900 and 2099.
'#^((19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01]))*$#'



Diner's Club Credit Card
'/^(3(?:0[0-5]|[68][0-9])[0-9]{11})*$/'

Emails
'/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4})*$/'

IP Addresses
'/^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$/'

MasterCard Credit Card
'/^(5[1-5][0-9]{14})*$/'

Passwords
Test for a strong password with this regex. The password must contain one lowercase letter, one uppercase letter, one number, and be at least 6 characters long.
'/^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$/'

Phone Numbers (North American)
This regex will validate a 10-digit North American telephone number. Separators are not required, but can include spaces, hyphens, or periods. Parentheses around the area code are also optional.
'/^((([0-9]{1})*[- .(]*([0-9]{3})[- .)]*[0-9]{3}[- .]*[0-9]{4})+)*$/'

Social Security Numbers in US
'/^([0-9]{3}[-]*[0-9]{2}[-]*[0-9]{4})*$/'


UK Postal Codes
'/^([A-Z]{1,2}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2})*$/'


URLs
This URL regex will validate most common URL formats correctly.
'/^(((http|https|ftp):\/\/)?([[a-zA-Z0-9]\-\.])+(\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\/+=%&_\.~?\-]*))*$/'

US States
Validate all 2-letter US State abbreviates with this regular expression.
'/^(?:A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])*$/'

US ZIP Codes
This regexp verifies US ZIP Codes, with an optional 4 number ZIP code extension.
'/^([0-9]{5}(?:-[0-9]{4})?)*$/'

Visa Credit Card
'/^(4[0-9]{12}(?:[0-9]{3})?)*$/'


Validare un indirizzo e-mail
La validazione non garantisce che l'indirizzo email sia vero e funzionante... tuttavia è un ottimo modo per evitare gli errori più grossolani.
^[a-z0-9_]+@[a-z0-9\-]+\.[a-z0-9\-\.]+$]

Verificare l'username
Poniamo di voler verificare che l'username prescelto dai nostri utenti in fase di iscrizione sia conforme alle nostre disposizioni, che contenga, cioè, solo lettere e/o numeri ed abbia una lunghezza minima di 6 e massima di 12 caratteri:
^[a-z0-9]{6,12}$

Validare un nome a dominio
Nel esempio sottostante utilizzeremo un elenco di estensioni alternative (separate da "|"):
^[a-z0-9\-\.]+\.(it|com|org|net|eu|mobi)$

Validare una data nel formato DD/MM/AAAA:
^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}

Validare un colore esadecimale (HEXADECIMAL)
^#?([a-f]|[0-9]){3}(([a-f]|[0-9]){3})?$

Validare un codice fiscale
^[a-z]{6}[0-9]{2}[a-z][0-9]{2}[a-z][0-9]{3}[a-z]$

Validare una partita IVA
La Partita IVA è un codice numerico composto da 11 cifre.
^[0-9]{11}$

Verificare che un file abbia una data estensione
Nel nostro esempio andremo a verificare che il file abbia estensione .zip:
^.+\.zip$

Verificare che il file sia un'immagine
^.+\.(jpeg|jpg|png|gif|bmp)$
