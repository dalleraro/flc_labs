
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jul 17 17:18:03 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;

/** CUP v0.10k generated parser.
  * @version Mon Jul 17 17:18:03 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\003\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\005\004" +
    "\000\002\006\004\000\002\007\004\000\002\007\002\000" +
    "\002\010\005\000\002\027\002\000\002\013\006\000\002" +
    "\013\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\011\004\000\002\011\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\015\012\000" +
    "\002\015\010\000\002\020\004\000\002\020\003\000\002" +
    "\016\006\000\002\016\004\000\002\016\002\000\002\021" +
    "\003\000\002\021\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\026\004\000\002\022\006\000" +
    "\002\023\007\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\004\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\006\003\004\015\006\001\002\000\006\010" +
    "\ufffd\015\ufffd\001\002\000\004\015\006\001\002\000\004" +
    "\006\126\001\002\000\004\002\125\001\002\000\006\010" +
    "\011\015\006\001\002\000\014\002\ufff9\016\ufff9\020\ufff9" +
    "\030\ufff9\031\ufff9\001\002\000\004\015\006\001\002\000" +
    "\006\010\uffff\015\uffff\001\002\000\014\002\ufff0\016\ufff0" +
    "\020\ufff0\030\ufff0\031\020\001\002\000\004\002\000\001" +
    "\002\000\014\002\ufffa\016\ufffa\020\ufffa\030\ufffa\031\ufffa" +
    "\001\002\000\012\002\ufffb\016\041\020\036\030\033\001" +
    "\002\000\004\030\021\001\002\000\010\004\ufff2\006\ufff2" +
    "\027\030\001\002\000\006\004\ufff5\006\ufff5\001\002\000" +
    "\006\004\024\006\025\001\002\000\004\030\ufff7\001\002" +
    "\000\014\002\ufff8\016\ufff8\020\ufff8\030\ufff8\031\ufff8\001" +
    "\002\000\004\030\021\001\002\000\006\004\ufff6\006\ufff6" +
    "\001\002\000\006\032\032\033\031\001\002\000\006\004" +
    "\ufff3\006\ufff3\001\002\000\006\004\ufff4\006\ufff4\001\002" +
    "\000\004\027\122\001\002\000\012\002\uffee\016\uffee\020" +
    "\uffee\030\uffee\001\002\000\012\002\ufff1\016\ufff1\020\ufff1" +
    "\030\ufff1\001\002\000\004\011\116\001\002\000\012\002" +
    "\uffed\016\uffed\020\uffed\030\uffed\001\002\000\012\002\uffef" +
    "\016\uffef\020\uffef\030\uffef\001\002\000\004\011\042\001" +
    "\002\000\014\011\047\022\046\030\043\032\052\033\051" +
    "\001\002\000\024\006\uffd6\012\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\001\002\000\004" +
    "\012\076\001\002\000\024\006\uffd7\012\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\001\002" +
    "\000\014\011\047\022\046\030\043\032\052\033\051\001" +
    "\002\000\014\011\047\022\046\030\043\032\052\033\051" +
    "\001\002\000\020\021\057\022\061\023\060\024\062\025" +
    "\053\026\056\027\055\001\002\000\024\006\uffd4\012\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\001\002\000\024\006\uffd5\012\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\001\002\000" +
    "\014\011\047\022\046\030\043\032\052\033\051\001\002" +
    "\000\014\011\047\022\046\030\043\032\052\033\051\001" +
    "\002\000\004\027\070\001\002\000\014\011\047\022\046" +
    "\030\043\032\052\033\051\001\002\000\014\011\047\022" +
    "\046\030\043\032\052\033\051\001\002\000\014\011\047" +
    "\022\046\030\043\032\052\033\051\001\002\000\014\011" +
    "\047\022\046\030\043\032\052\033\051\001\002\000\014" +
    "\011\047\022\046\030\043\032\052\033\051\001\002\000" +
    "\024\006\uffda\012\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\001\002\000\024\006\uffdc\012" +
    "\uffdc\021\uffdc\022\uffdc\023\060\024\062\025\uffdc\026\uffdc" +
    "\027\uffdc\001\002\000\024\006\uffdb\012\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\001\002" +
    "\000\024\006\uffdd\012\uffdd\021\uffdd\022\uffdd\023\060\024" +
    "\062\025\uffdd\026\uffdd\027\uffdd\001\002\000\014\012\uffe2" +
    "\021\057\022\061\023\060\024\062\001\002\000\014\011" +
    "\uffe0\022\uffe0\030\uffe0\032\uffe0\033\uffe0\001\002\000\014" +
    "\012\uffe1\021\057\022\061\023\060\024\062\001\002\000" +
    "\014\012\uffe3\021\057\022\061\023\060\024\062\001\002" +
    "\000\014\012\074\021\057\022\061\023\060\024\062\001" +
    "\002\000\024\006\uffd9\012\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\001\002\000\024\006" +
    "\uffd8\012\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\001\002\000\010\013\102\020\036\030" +
    "\033\001\002\000\016\002\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\030\uffe5\001\002\000\014\002\uffe6\016\uffe6\017" +
    "\107\020\uffe6\030\uffe6\001\002\000\016\002\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\030\uffe4\001\002\000\006\020" +
    "\036\030\033\001\002\000\010\014\uffe9\020\uffe9\030\uffe9" +
    "\001\002\000\010\014\105\020\036\030\033\001\002\000" +
    "\014\002\uffe6\016\uffe6\017\107\020\uffe6\030\uffe6\001\002" +
    "\000\010\014\uffea\020\uffea\030\uffea\001\002\000\010\013" +
    "\112\020\036\030\033\001\002\000\012\002\uffec\016\uffec" +
    "\020\uffec\030\uffec\001\002\000\012\002\uffe7\016\uffe7\020" +
    "\uffe7\030\uffe7\001\002\000\006\020\036\030\033\001\002" +
    "\000\010\014\114\020\036\030\033\001\002\000\012\002" +
    "\uffe8\016\uffe8\020\uffe8\030\uffe8\001\002\000\012\002\uffeb" +
    "\016\uffeb\020\uffeb\030\uffeb\001\002\000\004\030\117\001" +
    "\002\000\004\012\120\001\002\000\004\006\121\001\002" +
    "\000\016\002\uffde\014\uffde\016\uffde\017\uffde\020\uffde\030" +
    "\uffde\001\002\000\014\011\047\022\046\030\043\032\052" +
    "\033\051\001\002\000\014\006\124\021\057\022\061\023" +
    "\060\024\062\001\002\000\016\002\uffdf\014\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\030\uffdf\001\002\000\004\002\001\001" +
    "\002\000\006\010\ufffc\015\ufffc\001\002\000\004\015\006" +
    "\001\002\000\006\010\ufffe\015\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\010\003\006\004\007\005\004\001\001\000" +
    "\002\001\001\000\004\005\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\006\006" +
    "\014\007\013\001\001\000\004\005\012\001\001\000\002" +
    "\001\001\000\006\010\015\011\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\034\015\037\022\033" +
    "\023\036\001\001\000\006\013\022\014\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\025\001\001\000\002\001\001\000\004\014\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\043\024\047\025" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\074\025\044\001\001\000\006\024" +
    "\072\025\044\001\001\000\004\026\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\071\025\044\001" +
    "\001\000\006\024\070\025\044\001\001\000\002\001\001" +
    "\000\006\024\066\025\044\001\001\000\006\024\065\025" +
    "\044\001\001\000\006\024\064\025\044\001\001\000\006" +
    "\024\063\025\044\001\001\000\006\024\062\025\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\077\022\076\023" +
    "\100\001\001\000\002\001\001\000\004\016\114\001\001" +
    "\000\002\001\001\000\012\020\103\021\102\022\076\023" +
    "\100\001\001\000\002\001\001\000\010\021\105\022\076" +
    "\023\100\001\001\000\004\016\107\001\001\000\002\001" +
    "\001\000\010\021\110\022\076\023\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\112\021\102\022" +
    "\076\023\100\001\001\000\010\021\105\022\076\023\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\122\025\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\127\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    symbol_table = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   public HashMap symbol_table;

   public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
    
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


      
   public void out(String str){
      System.out.println(str);
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= FLOAT 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= INT 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var ::= ID 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= var 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= MINUS expr 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= RO expr RC 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr DIV expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr MUL expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr MINUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // print ::= PRINT RO ID RC S 
            { parser.Tree.reduce(5,"print",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ass ::= ID EQ expr S 
            { parser.Tree.reduce(4,"ass",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ass*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // equiv ::= EQ EQ 
            { parser.Tree.reduce(2,"equiv",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*equiv*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_cond ::= expr equiv expr 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_cond ::= expr MIN expr 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_cond ::= expr MAJ expr 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*if_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_instr ::= print 
            { parser.Tree.reduce(1,"if_instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*if_instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_instr ::= ass 
            { parser.Tree.reduce(1,"if_instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*if_instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // else ::= 
            { parser.Tree.reduce(0,"else",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // else ::= ELSE if_instr 
            { parser.Tree.reduce(2,"else",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else ::= ELSE CO if_instr_l CC 
            { parser.Tree.reduce(4,"else",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_instr_l ::= if_instr 
            { parser.Tree.reduce(1,"if_instr_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_instr_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_instr_l ::= if_instr_l if_instr 
            { parser.Tree.reduce(2,"if_instr_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_instr_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if ::= IF RO if_cond RC if_instr else 
            { parser.Tree.reduce(6,"if",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if ::= IF RO if_cond RC CO if_instr_l CC else 
            { parser.Tree.reduce(8,"if",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= print 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= ass 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= if 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*instr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr_l ::= 
            { parser.Tree.reduce(0,"instr_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*instr_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr_l ::= instr_l instr 
            { parser.Tree.reduce(2,"instr_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*instr_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vard ::= ID 
            { parser.Tree.reduce(1,"vard",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*vard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vard ::= ID EQ FLOAT 
            { parser.Tree.reduce(3,"vard",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                  if(!((String)parser.stack(-3)).equals("float"))
                     out("TYPE ERROR!");
                  else
                     parser.symbol_table.put(v, n);
               
              CUP$parser$result = new java_cup.runtime.Symbol(10/*vard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vard ::= ID EQ INT 
            { parser.Tree.reduce(3,"vard",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                  if(!((String)parser.stack(-3)).equals("int"))
                     out("TYPE ERROR!");
                  else
                     parser.symbol_table.put(v, n);
               
              CUP$parser$result = new java_cup.runtime.Symbol(10/*vard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vard_l ::= vard 
            { parser.Tree.reduce(1,"vard_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*vard_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vard_l ::= vard_l CM NT$0 vard 
            { parser.Tree.reduce(4,"vard_l",0);
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*vard_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT = null;
 RESULT = (String)parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= TYPE vard_l S 
            { parser.Tree.reduce(3,"decl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_l ::= 
            { parser.Tree.reduce(0,"decl_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_l ::= decl_l decl 
            { parser.Tree.reduce(2,"decl_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*decl_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cinstrs ::= decl_l instr_l 
            { parser.Tree.reduce(2,"cinstrs",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*cinstrs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // hword ::= HWORD S 
            { parser.Tree.reduce(2,"hword",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*hword*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= error 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;
		
                  out("Error: Syntax error in Header");
               
              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= hword hword hword 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header hword hword 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP cinstrs 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

