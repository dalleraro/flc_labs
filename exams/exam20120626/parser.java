
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jul 17 15:01:56 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;

/** CUP v0.10k generated parser.
  * @version Mon Jul 17 15:01:56 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\003\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\005\004" +
    "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
    "\002\007\004\000\002\007\005\000\002\020\002\000\002" +
    "\010\010\000\002\021\002\000\002\011\006\000\002\011" +
    "\003\000\002\011\002\000\002\012\004\000\002\013\005" +
    "\000\002\013\004\000\002\013\002\000\002\014\015\000" +
    "\002\017\002\000\002\022\002\000\002\015\006\000\002" +
    "\015\003\000\002\016\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\006\012\005\013\ufff9\001\002\000\006\012" +
    "\075\013\100\001\002\000\010\011\ufffb\012\ufffb\013\ufffb" +
    "\001\002\000\006\012\070\013\067\001\002\000\004\002" +
    "\066\001\002\000\004\011\011\001\002\000\004\016\014" +
    "\001\002\000\006\011\032\016\014\001\002\000\004\016" +
    "\014\001\002\000\004\014\015\001\002\000\004\005\016" +
    "\001\002\000\010\004\ufff6\006\ufff6\015\ufff6\001\002\000" +
    "\010\004\ufff1\006\ufff1\015\021\001\002\000\006\004\ufff2" +
    "\006\ufff2\001\002\000\004\016\027\001\002\000\006\004" +
    "\024\006\023\001\002\000\004\015\ufff4\001\002\000\006" +
    "\011\ufff5\016\ufff5\001\002\000\004\015\021\001\002\000" +
    "\006\004\ufff3\006\ufff3\001\002\000\006\004\ufff0\006\ufff0" +
    "\001\002\000\004\016\014\001\002\000\006\011\ufff7\016" +
    "\ufff7\001\002\000\006\002\uffed\017\036\001\002\000\006" +
    "\011\ufff8\016\ufff8\001\002\000\006\002\000\017\036\001" +
    "\002\000\004\017\036\001\002\000\004\023\037\001\002" +
    "\000\004\005\040\001\002\000\004\022\041\001\002\000" +
    "\004\005\042\001\002\000\004\023\043\001\002\000\004" +
    "\020\044\001\002\000\004\010\045\001\002\000\004\015" +
    "\uffeb\001\002\000\004\015\047\001\002\000\004\005\056" +
    "\001\002\000\006\004\053\006\052\001\002\000\006\004" +
    "\uffe8\006\uffe8\001\002\000\004\015\uffea\001\002\000\006" +
    "\002\uffec\017\uffec\001\002\000\004\015\047\001\002\000" +
    "\006\004\uffe9\006\uffe9\001\002\000\004\023\057\001\002" +
    "\000\004\005\060\001\002\000\004\016\061\001\002\000" +
    "\004\021\062\001\002\000\006\004\uffe7\006\uffe7\001\002" +
    "\000\006\002\uffee\017\uffee\001\002\000\004\017\036\001" +
    "\002\000\006\002\uffef\017\uffef\001\002\000\004\002\001" +
    "\001\002\000\006\012\005\013\ufff9\001\002\000\010\011" +
    "\ufffa\012\ufffa\013\ufffa\001\002\000\006\012\075\013\076" +
    "\001\002\000\006\012\070\013\073\001\002\000\004\012" +
    "\005\001\002\000\006\011\ufffd\012\075\001\002\000\010" +
    "\011\ufffc\012\ufffc\013\ufffc\001\002\000\006\011\ufff9\012" +
    "\ufff9\001\002\000\006\011\ufffe\012\070\001\002\000\006" +
    "\012\ufff9\013\ufff9\001\002\000\006\012\070\013\102\001" +
    "\002\000\006\011\ufff9\012\ufff9\001\002\000\006\011\uffff" +
    "\012\070\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\012\003\006\004\007\005\003\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\011\010" +
    "\012\001\001\000\004\010\032\001\001\000\004\010\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\016\001\001\000\006\011\021\012\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\024\001\001\000\002\001\001\000\004\012\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\030\001" +
    "\001\000\002\001\001\000\006\013\033\014\034\001\001" +
    "\000\002\001\001\000\004\014\063\001\001\000\004\014" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\045\001\001\000\006" +
    "\015\047\016\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\053\001\001\000\002" +
    "\001\001\000\004\016\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\070\006\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\076\001\001\000" +
    "\002\001\001\000\004\006\100\001\001\000\002\001\001" +
    "\000\004\006\102\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    symbol_table = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


   public HashMap symbol_table;

   public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
    
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   public class Bid{
      String usr;
      Double adv;

      public Bid(String usr, Double adv){
         this.usr = usr;
         this.adv = adv;
      }
   }

   public void out(String str){
      System.out.println(str);
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // advance ::= UCODE C NUM C FNUM EURO 
            { parser.Tree.reduce(6,"advance",0);
              Object RESULT = null;
		int ucleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String uc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     Double cap = (Double)parser.symbol_table.get(uc);
                     Object[] data = (Object[])parser.stack(-6);

                     if(v < ((Bid)data[1]).adv)
                        out(uc+": Error, advance less then current auction value");
                     else if(t > (Integer)data[0])
                        out(uc+": Error, advance out of time");
                     else if(v > cap)
                        out(uc+": Error, available only "+cap+" euro");
                     else {
                        out(uc+": New auction price "+v+" euro");
                        data[1] = new Bid(uc, v);
                     }
                  
              CUP$parser$result = new java_cup.runtime.Symbol(12/*advance*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // advances ::= advance 
            { parser.Tree.reduce(1,"advances",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*advances*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // advances ::= advances CM NT$2 advance 
            { parser.Tree.reduce(4,"advances",0);
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*advances*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            { parser.Tree.reduce(0,"NT$2",0);
              Object RESULT = null;
 RESULT = (Object[])parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              Object[] RESULT = null;
		 
                     out("Auction "+(Integer)parser.stack(-6)+":");
                     RESULT = new Object[2];
                     RESULT[0] = (Integer)parser.stack(-2); 
                     RESULT[1] = new Bid("", 0.0);
                   
              CUP$parser$result = new java_cup.runtime.Symbol(13/*nt0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // auction ::= AUCT NUM C PRODN C NUM MIN ARROW nt0 advances S 
            { parser.Tree.reduce(11,"auction",0);
              Object RESULT = null;
		
                     Object[] data = (Object[])parser.stack(-2);
                     out("Winner is "+((Bid)data[1]).usr+" price "+((Bid)data[1]).adv+" euro");
                   
              CUP$parser$result = new java_cup.runtime.Symbol(10/*auction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // auctions ::= 
            { parser.Tree.reduce(0,"auctions",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*auctions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // auctions ::= auction auction 
            { parser.Tree.reduce(2,"auctions",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*auctions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // auctions ::= auctions auction auction 
            { parser.Tree.reduce(3,"auctions",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*auctions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // user ::= UCODE FNUM 
            { parser.Tree.reduce(2,"user",0);
              Object RESULT = null;
		int ucleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                     Double rate = (Double)parser.stack(-2);
                     parser.symbol_table.put(uc, rate * n);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*user*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // user_l ::= 
            { parser.Tree.reduce(0,"user_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*user_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // user_l ::= user 
            { parser.Tree.reduce(1,"user_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*user_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // user_l ::= user_l CM NT$1 user 
            { parser.Tree.reduce(4,"user_l",0);
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*user_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            { parser.Tree.reduce(0,"NT$1",0);
              Object RESULT = null;
 RESULT = (Double)parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // currency ::= FNUM STRSTR C NT$0 user_l S 
            { parser.Tree.reduce(6,"currency",0);
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*currency*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT = null;
 RESULT = (Double)parser.stack(-2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // currencies ::= currency currency currency 
            { parser.Tree.reduce(3,"currencies",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*currencies*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // currencies ::= currencies currency 
            { parser.Tree.reduce(2,"currencies",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*currencies*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // he ::= 
            { parser.Tree.reduce(0,"he",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*he*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // he ::= he HOUR 
            { parser.Tree.reduce(2,"he",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*he*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // hl ::= HOUR 
            { parser.Tree.reduce(1,"hl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*hl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // hl ::= hl HOUR 
            { parser.Tree.reduce(2,"hl",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*hl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= he CODE he CODE hl 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= he CODE hl CODE he 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= hl CODE he CODE he 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP currencies SEP auctions 
            { parser.Tree.reduce(5,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

